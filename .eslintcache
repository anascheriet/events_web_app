[{"/Users/anascheriet/Documents/Projects/React/events_web_app/src/index.js":"1","/Users/anascheriet/Documents/Projects/React/events_web_app/src/App.js":"2","/Users/anascheriet/Documents/Projects/React/events_web_app/src/reportWebVitals.js":"3","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Sidebar.js":"4","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/SideBar.js":"5","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/NavBar.js":"6","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Navbar.js":"7","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Content.js":"8","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/rootReducer.js":"9","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/userReducer.js":"10","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/api.js":"11","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/login.js":"12","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/Login.js":"13","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Exemple.js":"14","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/logoutAction.js":"15","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loadUserInfo.js":"16","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loginAction.js":"17","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventTypeReducer.js":"18","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/getTypesAction.js":"19","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/eventTypeCUD.js":"20","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/animations.js":"21","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/CountryCityDATA.js":"22","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/eventAction.js":"23","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/Notifications.js":"24","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/loadEventAction.js":"25","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventReducer.js":"26","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventsDashboard.js":"27","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventEditForm.js":"28","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventForm.js":"29","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventTypes.js":"30","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/ClientReducer.js":"31","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/clientActions/getAllEventsAction.js":"32","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/EventsHome.js":"33","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/Event.js":"34","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/util.js":"35","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/EventDetail.js":"36","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/Dashboard.js":"37","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/Redirect.js":"38","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/ClientContent.js":"39","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/ResetPassword.js":"40","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/AdminList.js":"41","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/Register.js":"42","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/ClientBookings.js":"43","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/EditProfile.js":"44","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loadCountries.js":"45","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/EventsFilterBar.js":"46"},{"size":1733,"mtime":1611419902885,"results":"47","hashOfConfig":"48"},{"size":3333,"mtime":1612941695386,"results":"49","hashOfConfig":"48"},{"size":362,"mtime":1610046698593,"results":"50","hashOfConfig":"48"},{"size":901,"mtime":1613239229630,"results":"51","hashOfConfig":"48"},{"size":967,"mtime":1610059435350,"results":"52","hashOfConfig":"48"},{"size":484,"mtime":1610059441419,"results":"53","hashOfConfig":"48"},{"size":2333,"mtime":1613667294697,"results":"54","hashOfConfig":"48"},{"size":283,"mtime":1611756426217,"results":"55","hashOfConfig":"48"},{"size":432,"mtime":1611230950749,"results":"56","hashOfConfig":"48"},{"size":1049,"mtime":1612943924276,"results":"57","hashOfConfig":"48"},{"size":2741,"mtime":1613499164182,"results":"58","hashOfConfig":"48"},{"size":191,"mtime":1610225178281,"results":"59","hashOfConfig":"48"},{"size":5507,"mtime":1613669297236,"results":"60","hashOfConfig":"48"},{"size":3120,"mtime":1610492708884,"results":"61","hashOfConfig":"48"},{"size":230,"mtime":1611425673266,"results":"62","hashOfConfig":"48"},{"size":359,"mtime":1613667198485,"results":"63","hashOfConfig":"48"},{"size":412,"mtime":1612635025885,"results":"64","hashOfConfig":"48"},{"size":341,"mtime":1611161273030,"results":"65","hashOfConfig":"48"},{"size":307,"mtime":1611319663689,"results":"66","hashOfConfig":"48"},{"size":201,"mtime":1610652907595,"results":"67","hashOfConfig":"48"},{"size":553,"mtime":1611257977076,"results":"68","hashOfConfig":"48"},{"size":1032381,"mtime":1610998461066,"results":"69","hashOfConfig":"48"},{"size":369,"mtime":1613667032619,"results":"70","hashOfConfig":"48"},{"size":875,"mtime":1612635565776,"results":"71","hashOfConfig":"48"},{"size":479,"mtime":1612635208512,"results":"72","hashOfConfig":"48"},{"size":496,"mtime":1611186851562,"results":"73","hashOfConfig":"48"},{"size":8086,"mtime":1613671251202,"results":"74","hashOfConfig":"48"},{"size":7183,"mtime":1613499122652,"results":"75","hashOfConfig":"48"},{"size":8240,"mtime":1613667075180,"results":"76","hashOfConfig":"48"},{"size":6847,"mtime":1613240257182,"results":"77","hashOfConfig":"48"},{"size":304,"mtime":1611231455512,"results":"78","hashOfConfig":"48"},{"size":304,"mtime":1613238572915,"results":"79","hashOfConfig":"48"},{"size":3898,"mtime":1613670886477,"results":"80","hashOfConfig":"48"},{"size":1499,"mtime":1611781924143,"results":"81","hashOfConfig":"48"},{"size":934,"mtime":1613671002660,"results":"82","hashOfConfig":"48"},{"size":6750,"mtime":1613490465330,"results":"83","hashOfConfig":"48"},{"size":13502,"mtime":1613497208546,"results":"84","hashOfConfig":"48"},{"size":779,"mtime":1612944173152,"results":"85","hashOfConfig":"48"},{"size":292,"mtime":1611756405527,"results":"86","hashOfConfig":"48"},{"size":2753,"mtime":1612634983851,"results":"87","hashOfConfig":"48"},{"size":7758,"mtime":1612944420289,"results":"88","hashOfConfig":"48"},{"size":5182,"mtime":1613669629417,"results":"89","hashOfConfig":"48"},{"size":2868,"mtime":1612637177615,"results":"90","hashOfConfig":"48"},{"size":4943,"mtime":1613239305315,"results":"91","hashOfConfig":"48"},{"size":308,"mtime":1612944376386,"results":"92","hashOfConfig":"48"},{"size":1710,"mtime":1613670824507,"results":"93","hashOfConfig":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"12qyaxg",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"96"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"96"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"96"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"96"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"96"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"96"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/anascheriet/Documents/Projects/React/events_web_app/src/index.js",[],["193","194"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/App.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/reportWebVitals.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Sidebar.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/SideBar.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/NavBar.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Navbar.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Content.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/rootReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/userReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/api.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/login.js",["195","196","197","198"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/Login.js",["199"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Exemple.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/logoutAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loadUserInfo.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loginAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventTypeReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/getTypesAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/eventTypeCUD.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/animations.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/CountryCityDATA.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/eventAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/Notifications.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/loadEventAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventsDashboard.js",["200"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventEditForm.js",["201"],"import { useFormik } from 'formik';\nimport React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux';\nimport { myValidationSchema } from './EventForm';\nimport {\n    Form,\n    Input,\n    Select,\n    DatePicker,\n    InputNumber,\n    Upload,\n    Button as AntdButton\n} from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { Button } from 'semantic-ui-react';\nimport { eventsUrls, uploadImageUrl } from '../../../redux/api';\nimport axios from 'axios';\nimport { editToast, errorToast } from '../../../common/Notifications';\n\nexport const EventEditForm = ({ closeEDrawer }) => {\n\n\n    //retrieve event types array from evTypes reducer\n    const { eventTypes } = useSelector(state => state.eventTypesState);\n    const { event } = useSelector(state => state.eventState);\n\n    const { countries } = useSelector(state => state.userState);\n\n    //Set up Event Object to object\n    const initialValues = {\n        eventName: event.eventName,\n        description: event.description,\n        country: event.country,\n        city: event.city,\n        availabletickets: event.availableTickets,\n        ticketprice: event.ticketPrice,\n        eventtypeid: event.eventType.id,\n        eventDate: null,\n        image: event.imagePath,\n    }\n\n    //Set up formik object to handle the form\n    const formik = useFormik({\n        validationSchema: myValidationSchema,\n        initialValues: initialValues,\n    })\n\n    //Image upload logic\n    const eventImageUpload = async (file) => {\n        let formData = new FormData();\n        formData.append('file', file);\n        let response = await axios.post(uploadImageUrl, formData);\n        //Assign response to image path\n        formik.values.image = response.data;\n    }\n\n\n    //Country / City Dropdown logic\n    const [Cities, setCities] = useState([]);\n\n    const submitHandler = async (ev) => {\n\n        try {\n            const resp = await axios.patch(eventsUrls.edit(event.id), ev)\n            editToast(resp.data + \" ✅\");\n            closeEDrawer();\n        } catch (error) {\n            errorToast(error.data);\n        }\n\n    }\n\n\n    return (\n        <Form\n            className=\"eventForm\"\n            wrapperCol={{ span: 26 }}\n            layout=\"vertical\"\n            onFinish={() => submitHandler(formik.values)}\n        >\n            <Form.Item label=\"Event Name\">\n                <Input name='eventName' {...formik.getFieldProps('eventName')} />\n                {formik.touched.eventName && formik.errors.eventName &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventName}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Type\">\n                <Select\n                    name='eventtypeid'\n                    onChange={evtype => formik.setFieldValue('eventtypeid', evtype)}\n                    value={formik.values.eventtypeid}>\n                    {eventTypes.map((eType, index) => {\n                        return <Select.Option key={index} value={eType.id}>{eType.name}</Select.Option>\n                    })}\n                </Select>\n                {formik.touched.eventtypeid && formik.errors.eventtypeid &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventtypeid}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Country\">\n                <Select\n                    name='country'\n                    onChange={country => formik.setFieldValue('country', country)}\n                    onSelect={country => ((setCities(countries.filter(x => x.country === country)[0].cities), formik.setFieldValue('country', country)))}\n                    value={formik.values.country}>\n                    {countries.map((c, index) => {\n                        return <Select.Option key={index} value={c.country}>{c.country}</Select.Option>\n                    })}\n                </Select>\n                {formik.touched.country && formik.values.country === \"\" && console.log(formik.errors.country)}\n            </Form.Item>\n            <Form.Item label=\"City\">\n                <Select\n                    name='city'\n                    onChange={city => (formik.setFieldValue('city', city))}\n                    value={formik.values.city}>\n                    {Cities.map((c, index) => {\n                        return <Select.Option key={index} value={c}>{c}</Select.Option>\n                    })}\n\n                </Select>\n                {formik.touched.city && formik.errors.city &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.city}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Description\">\n                <Input.TextArea name='description' {...formik.getFieldProps('description')} />\n                {formik.touched.description && formik.errors.description &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.description}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Date\">\n\n                <DatePicker\n                    name='eventDate'\n                    onChange={date => (formik.setFieldValue('eventDate', date))}\n                    value={formik.values.eventDate}\n                    className=\"input\"\n                    showTime\n                    format=\"YYYY-MM-DD HH:mm:ss\" />\n                {formik.touched.eventDate && formik.errors.eventDate &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventDate}</pre>}\n\n            </Form.Item>\n            <Form.Item label=\"Ticket Price\">\n                <InputNumber\n                    name='ticketprice'\n                    onChange={price => formik.setFieldValue('ticketprice', price)}\n                    value={formik.values.ticketprice}\n                    style={{ width: \"25.2rem\" }} />\n                {formik.touched.ticketprice && formik.errors.ticketprice &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.ticketprice}</pre>}\n            </Form.Item>\n            <Form.Item label=\"No of available tickets\">\n                <Input\n                    name='availabletickets'\n                    /* onChange={tickets => formik.setFieldValue('availabletickets', tickets)} */\n                    {...formik.getFieldProps('availabletickets')}\n                    value={formik.values.availabletickets}\n                    style={{ width: \"25.2rem\" }} />\n                {formik.touched.availabletickets && formik.errors.availabletickets &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.availabletickets}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Image\">\n                <Upload name='image' action={eventImageUpload}>\n                    <AntdButton icon={<UploadOutlined />}>Click to Upload</AntdButton>\n                </Upload>\n            </Form.Item>\n            <Form.Item >\n                <Button color=\"blue\" disabled={Object.keys(formik.errors).length > 1} type=\"submit\">Update</Button>\n                <Button color=\"grey\" type=\"button\" onClick={closeEDrawer}>Cancel</Button>\n            </Form.Item>\n        </Form>\n    )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventForm.js",["202","203"],"import React, { useState } from 'react'\nimport {\n    Form,\n    Input,\n    Select,\n    DatePicker,\n    InputNumber,\n    Upload,\n    Button as AntdButton\n} from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport \"./eventform.scss\"\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { Button } from 'semantic-ui-react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createEventAction } from '../../../redux/actions/eventActions/eventAction'\nimport { errorToast, successToast } from '../../../common/Notifications';\nimport axios from 'axios';\nimport { uploadImageUrl } from '../../../redux/api';\nimport { loadUserInfo } from '../../../redux/actions/Users/loadUserInfo';\n\n//Set up object validation\nexport const myValidationSchema = new Yup.ObjectSchema({\n    eventName: Yup.string().required(),\n    description: Yup.string().required(),\n    country: Yup.string().required(),\n    city: Yup.string().required(),\n    availabletickets: Yup.number().required().positive().integer(),\n    ticketprice: Yup.number().required().positive(),\n    eventtypeid: Yup.number().required(),\n    eventDate: Yup.string().required()\n})\n\nexport const EventForm = ({ closeDrawer, }) => {\n\n\n    //set uo the dispatcher for different actions\n    const dispatch = useDispatch();\n\n    //retrieve event types array from evTypes reducer\n    const { eventTypes } = useSelector(state => state.eventTypesState);\n\n    //retrieve countries array\n    const { countries } = useSelector(state => state.userState);\n\n    //Country / City Dropdown logic\n    const [Cities, setCities] = useState([]);\n\n    //Set up Event Object\n    const initialValues = {\n        eventName: '',\n        description: '',\n        country: '',\n        city: '',\n        availabletickets: null,\n        ticketprice: null,\n        eventtypeid: null,\n        eventDate: '',\n        image: ''\n    }\n\n\n    //Set up formik object to handle the form\n    const formik = useFormik({\n        validationSchema: myValidationSchema,\n        initialValues: initialValues,\n    })\n\n    //get events so we can add to them\n    const { user } = useSelector(state => state.userState);\n\n\n    const clearInputs = () => {\n        formik.values.eventName = '';\n        formik.values.description = '';\n        formik.values.country = '';\n        formik.values.city = '';\n        formik.values.availabletickets = null;\n        formik.values.ticketprice = null;\n        formik.values.eventtypeid = null;\n        formik.values.eventDate = '';\n        formik.values.image = null;\n    }\n\n\n    //Submit method\n    const submitHandler = (event) => {\n        try {\n            dispatch(createEventAction(event));\n            setTimeout(() => {\n                dispatch(loadUserInfo());\n            }, 1000);\n            closeDrawer();\n            clearInputs();\n        } catch (error) {\n            errorToast(error.data);\n        }\n\n    }\n\n\n    //Image upload logic\n    const eventImageUpload = async (file) => {\n        let formData = new FormData();\n        formData.append('file', file);\n        let response = await axios.post(uploadImageUrl, formData);\n        //Assign response to image path\n        formik.values.image = response.data;\n    }\n\n    return (\n        <Form\n            className=\"eventForm\"\n            wrapperCol={{ span: 26 }}\n            layout=\"vertical\"\n            onFinish={() => submitHandler(formik.values)}\n        >\n            <Form.Item label=\"Event Name\">\n                <Input name='eventName' {...formik.getFieldProps('eventName')} />\n                {formik.touched.eventName && formik.errors.eventName &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventName}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Type\">\n                <Select\n                    name='eventtypeid'\n                    onChange={evtype => formik.setFieldValue('eventtypeid', evtype)}\n                    value={formik.values.eventtypeid}>\n                    {eventTypes?.map(eType => {\n                        return <Select.Option value={eType.id}>{eType.name}</Select.Option>\n                    })}\n                </Select>\n                {formik.touched.eventtypeid && formik.errors.eventtypeid &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventtypeid}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Country\">\n                <Select\n                    name='country'\n                    onChange={country => formik.setFieldValue('country', country)}\n                    onSelect={country => ((setCities(countries.filter(x => x.country === country)[0].cities), formik.setFieldValue('country', country)))}\n                    value={formik.values.country}>\n                    {countries.map(c => {\n                        return <Select.Option value={c.country}>{c.country}</Select.Option>\n                    })}\n                </Select>\n                {formik.touched.country && formik.values.country === \"\" && console.log(formik.errors.country)}\n            </Form.Item>\n            <Form.Item label=\"City\">\n                <Select\n                    name='city'\n                    onChange={city => (formik.setFieldValue('city', city))}\n                    value={formik.values.city}>\n                    {Cities.map((c, index) => {\n                        return <Select.Option key={index} value={c}>{c}</Select.Option>\n                    })}\n\n                </Select>\n                {formik.touched.city && formik.errors.city &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.city}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Description\">\n                <Input.TextArea name='description' {...formik.getFieldProps('description')} />\n                {formik.touched.description && formik.errors.description &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.description}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Date\">\n                <DatePicker\n                    name='eventDate'\n                    onChange={date => (formik.setFieldValue('eventDate', date))}\n                    value={formik.values.eventDate}\n                    className=\"input\"\n                    showTime\n                    format=\"YYYY-MM-DD HH:mm:ss\" />\n                {formik.touched.eventDate && formik.errors.eventDate &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventDate}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Ticket Price\">\n                <InputNumber\n                    name='ticketprice'\n                    onChange={price => formik.setFieldValue('ticketprice', price)}\n                    value={formik.values.ticketprice}\n                    style={{ width: \"25.2rem\" }} />\n                {formik.touched.ticketprice && formik.errors.ticketprice &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.ticketprice}</pre>}\n            </Form.Item>\n            <Form.Item label=\"No of available tickets\">\n                <Input\n                    name='availabletickets'\n                    /* onChange={tickets => formik.setFieldValue('availabletickets', tickets)} */\n                    {...formik.getFieldProps('availabletickets')}\n                    value={formik.values.availabletickets}\n                    style={{ width: \"25.2rem\" }} />\n                {formik.touched.availabletickets && formik.errors.availabletickets &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.availabletickets}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Image\">\n                <Upload name='image' action={eventImageUpload}>\n                    <AntdButton icon={<UploadOutlined />}>Click to Upload</AntdButton>\n                </Upload>\n            </Form.Item>\n            <Form.Item >\n                <Button color=\"green\" disabled={Object.keys(formik.errors).length !== 0} type=\"submit\">Submit</Button>\n                <Button color=\"grey\" type=\"button\" onClick={closeDrawer}>Cancel</Button>\n            </Form.Item>\n        </Form>\n    )\n\n\n}\n\n\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventTypes.js",["204"],"import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Button, Header, Icon, Table, Divider } from 'semantic-ui-react'\nimport { Tag, Modal, Form, Input } from 'antd';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport axios from 'axios';\nimport { eventTypesUrls } from '../../../redux/api'\nimport { editToast, errorToast, successToast } from '../../../common/Notifications';\nimport { getAllEventTypes } from '../../../redux/actions/eventTypes/getTypesAction';\nimport { createEventTypeAction } from '../../../redux/actions/eventTypes/eventTypeCUD'\n\nexport const EventTypes = () => {\n\n    const dispatch = useDispatch();\n    const { eventTypes } = useSelector(state => state.eventTypesState);\n    useEffect(() => {\n        dispatch(getAllEventTypes());\n    }, []);\n\n\n\n    const [editMode, setEditMode] = useState(false);\n\n    //Add event type modal\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    const openModalforAdd = () => {\n        setEditMode(false);\n        setIsModalVisible(true);\n        formik.values.name = \"\";\n        formik.values.id = 0;\n    };\n\n\n\n    const openModalforEdit = async (id) => {\n        const eventT = await axios.get(eventTypesUrls.details(id));\n        formik.values.name = eventT.data.name;\n        formik.values.id = eventT.data.id;\n        setEditMode(true);\n        setIsModalVisible(true);\n    };\n\n    //Edit Submit Handler\n    const editHandler = async () => {\n        await axios.put(eventTypesUrls.edit(formik.values.id), formik.values);\n        setIsModalVisible(false);\n        editToast(\"Event Type updated ! ✅\");\n    }\n\n\n    const closeModal = () => {\n        setIsModalVisible(false);\n    };\n\n    //Delete Modal\n    const [isDModalVisible, setIsDModalVisible] = useState(false);\n    const openDModal = () => {\n        setIsDModalVisible(true);\n    };\n\n    const closeDModal = () => {\n        setIsDModalVisible(false);\n    };\n\n    //Load event Type\n    const [getEvType, setGetEvType] = useState({})\n\n    const loadEType = async (id) => {\n        const eventT = await axios.get(eventTypesUrls.details(id));\n        setGetEvType({ ...getEvType, ...eventT.data });\n        console.log(getEvType);\n        openDModal();\n    }\n\n    const deleteETypeHandle = async (id) => {\n        try {\n            const resp = await axios.delete(eventTypesUrls.delete(id));\n            editToast(resp.data);\n            eventTypes.filter(x => x.id !== id);\n            eventTypes.splice(eventTypes.findIndex(x => x.id === id), 1);\n            closeDModal();\n        } catch (error) {\n            errorToast(error.data);\n        }\n    }\n\n\n\n    //Form handling \n\n    //Initial Values\n    const myInitialValues = { name: '' };\n\n    //Validation\n    const myValidationSchema = new Yup.object({\n        name: Yup.string().required(),\n    })\n\n    //Form handler\n    const formik = useFormik({\n        validationSchema: myValidationSchema,\n        initialValues: myInitialValues\n    })\n\n    //Create Submit eType handler\n    const submitHandler = (eType) => {\n        eType.id = eventTypes[eventTypes.length - 1].id + 1;\n        dispatch(createEventTypeAction(eType));\n        eventTypes.push(eType);\n        setIsModalVisible(false);\n        successToast(\"Event Type has been Added ! 👌\");\n    }\n\n\n    return (\n        <div>\n            <div className=\"header\">\n                <Header as='h2'>\n                    <Icon style={{ marginTop: \"0.7rem\" }} name='list' />\n                    <Header.Content>\n                        Event Types List\n                        <Header.Subheader>Manage event categories</Header.Subheader>\n                    </Header.Content>\n                </Header>\n                <Button onClick={openModalforAdd} color=\"green\"><Icon name=\"calendar plus\" /> Create new Event Type</Button>\n            </div>\n            <Divider />\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Category Id</Table.HeaderCell>\n                        <Table.HeaderCell>Category Name</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {eventTypes?.map(item => {\n                        return <Table.Row key={item.id}>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell>\n                                <Icon onClick={() => openModalforEdit(item.id)} name=\"edit\" title=\"Edit\" color=\"blue\" size=\"large\" />\n                                &nbsp;&nbsp;\n                                <Icon onClick={() => loadEType(item.id)} style={{ cursor: 'pointer' }} size=\"large\" title=\"Delete\" name=\"trash\" color=\"red\" /></Table.Cell>\n                        </Table.Row>\n                    })}\n                </Table.Body>\n            </Table>\n\n\n            {/* Add Event type modal  */}\n            <Modal title={editMode ? \"Update Event\" : \"Add an Event Type\"}\n                visible={isModalVisible}\n                onCancel={closeModal}\n                footer={[\n                    <Button onClick={closeModal}>\n                        Cancel\n                </Button>,\n                    <Button\n                        disabled={Object.keys(formik.errors).length !== 0}\n                        onClick={() => editMode ? editHandler() : submitHandler(formik.values)}\n                        color={editMode ? \"blue\" : \"green\"}>\n                        {editMode ? \"Update\" : \"Create\"}\n                    </Button>,\n                ]}>\n                <Form layout=\"vertical\">\n                    <Form.Item\n                        label=\"Type Name\">\n                        <Input name='name' {...formik.getFieldProps('name')} />\n                        {formik.touched.name && formik.errors.name && <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.name}</pre>}\n                    </Form.Item>\n                </Form>\n            </Modal>\n\n\n            {/* Delete evType Modal */}\n            <Modal title='Delete Event Type'\n                visible={isDModalVisible}\n                onCancel={closeDModal}\n                footer={[\n                    <Button onClick={closeDModal}>\n                        Cancel\n                </Button>,\n                    <Button\n                        onClick={() => deleteETypeHandle(getEvType.id)}\n                        color=\"red\">\n                        Delete\n                </Button>,\n                ]}>\n                <h3>Are you sure you want to delete Event Type: <Tag style={{ fontSize: \"20px\" }} color=\"red\">{getEvType.name}</Tag></h3>\n            </Modal>\n\n        </div>\n    )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/ClientReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/clientActions/getAllEventsAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/EventsHome.js",["205","206"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/Event.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/util.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/EventDetail.js",["207","208"],"import { motion } from 'framer-motion';\nimport React from 'react'\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Divider, Icon } from 'semantic-ui-react';\nimport { formatDate, formatImageLink } from '../../../common/util';\nimport \"./eventDetail.scss\";\nimport emptyStar from \"../../../../src/Layout/img/star-empty.svg\";\nimport fullStar from \"../../../../src/Layout/img/star-full.svg\";\nimport { Form, InputNumber } from 'antd';\nimport { Button } from 'semantic-ui-react';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport axios from 'axios';\nimport { clientUrls } from '../../../redux/api';\nimport { errorToast, successToast } from '../../../common/Notifications';\nimport { toast } from 'react-toastify';\n\n//TODO inform guest of log in necessity before event booking\n\nexport const EventDetail = ({ pathId }) => {\n\n    const { event } = useSelector(state => state.eventState);\n    const { user, token } = useSelector(state => state.userState);\n    const history = useHistory();\n\n    const exitCardHandler = (e) => {\n        const element = e.target;\n        if (element.classList.contains('card-shadow')) {\n            document.body.style.overflow = 'auto';\n        }\n        if (user === null) {\n            history.push(\"/Guest/\");\n        }\n        else {\n            history.push(\"/Home/\");\n        }\n\n    }\n\n    const stopevent = (e) => {\n        //make game detail card unclickable\n        e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n    }\n\n\n    const getStars = () => {\n        let length = event.clientReservations.length;\n        let stars = [];\n\n        if (length === 0) {\n            for (let i = 0; i < 5; i++) {\n                stars.push(<img key={i} alt=\"star\" src={emptyStar} />)\n            }\n        } else if (length > 13) {\n            for (let i = 0; i < 5; i++) {\n                stars.push(<img key={i} alt=\"star\" src={fullStar} />)\n            }\n        } else if (length >= 2 && length <= 5) {\n            for (let i = 0; i < 1; i++) {\n                stars.push(<img key={i} alt=\"star\" src={fullStar} />)\n            }\n            for (let i = 0; i < 4; i++) {\n                stars.push(<img key={i} alt=\"star\" src={emptyStar} />)\n            }\n        } else if (length > 5 && length <= 10) {\n            for (let i = 0; i < 2; i++) {\n                stars.push(<img key={i} alt=\"star\" src={fullStar} />)\n            }\n            for (let i = 0; i < 3; i++) {\n                stars.push(<img key={i} alt=\"star\" src={emptyStar} />)\n            }\n\n        } else if (length > 10 && length < 13) {\n            for (let i = 0; i < 4; i++) {\n                stars.push(<img key={i} alt=\"star\" src={fullStar} />)\n            }\n            for (let i = 0; i < 1; i++) {\n                stars.push(<img key={i} alt=\"star\" src={emptyStar} />)\n            }\n        }\n        return stars;\n    }\n\n    //Set up Booking form\n\n\n\n    const myValidationSchema = new Yup.ObjectSchema({\n        numOfPeople: Yup.number().required(),\n        eventid: Yup.number().required(),\n    })\n\n    const myInitialValues = {\n        numOfPeople: null,\n        eventid: pathId\n    }\n\n    const formik = useFormik({\n        initialValues: myInitialValues,\n        validationSchema: myValidationSchema\n    })\n\n\n    const bookEventHandler = async (values) => {\n        console.log(values);\n\n        try {\n            const response = await axios.post(clientUrls.book, values);\n            successToast(response?.data);\n            document.body.style.overflow = 'auto';\n            history.push(\"/Home/\");\n        } catch (error) {\n            errorToast(error.data);\n        }\n\n\n    }\n\n    return (\n        <>\n            <motion.div\n                className=\"card-shadow\" onClick={(e) => exitCardHandler(e)}>\n                <motion.div\n                    onClick={stopevent}\n                    layoutId={pathId}\n                    /* I added the layoutId because framer motion needs an id for each component it uses */\n                    className=\"detail\"\n                >\n                    <motion.div className=\"stats\">\n                        <motion.div className=\"rating\">\n                            <motion.h3 layoutId={`name ${pathId}`} style={{ fontSize: \"2rem\", marginBottom: \"0rem\", marginTop: \"0rem\" }} >{event.eventName}</motion.h3>\n                            <Divider style={{ margin: \"0rem 0rem\", marginBottom: \"0.5rem\" }} />\n                            <motion.h4 style={{ fontSize: \"2rem\", marginBottom: \"0rem\", marginTop: \"0rem\" }}><Icon name=\"dollar\" />{event.ticketPrice}</motion.h4>\n                            <Divider style={{ margin: \"1rem 0rem\", padding: \"0rem 0rem\" }} />\n                            <motion.p style={{ marginBottom: \"0.5rem\" }} >Popularity: {/* {game.rating} */}</motion.p>\n                            {getStars()}\n                        </motion.div>\n                        <motion.div style={{ marginTop: \"2rem\" }} className=\"info\">\n                            <motion.p layoutId={`location ${pathId}`}><Icon name=\"map pin\" />{event.city}, {event.country}</motion.p>\n                            <motion.p layoutId={`date ${pathId}`}>{formatDate(event.eventDate)}</motion.p>\n                            <Divider />\n                            <Form layout=\"vertical\" onFinish={() => bookEventHandler(formik.values)} style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n                                <Form.Item style={{ left: \"2rem\", marginBottom: \"0.5rem\" }}>\n                                    <InputNumber name=\"numOfPeople\" onChange={(numOfPeople) => formik.setFieldValue(\"numOfPeople\", numOfPeople)} placeholder=\"Number Of Tickets\" style={{ width: \"12rem\" }} />\n                                </Form.Item>\n                                <Button disabled={formik.values.numOfPeople === null || formik.values.numOfPeople === 0 || user === null} style={{ width: \"8rem\", backgroundColor: \"#ff7676\", color: \"white\", marginTop: \"0.5rem\" }} type=\"submit\">Book</Button>\n                                {formik.values.numOfPeople !== null && user === null && <span style={{ color: \"red\" }}>Please Log In before Booking</span>}\n                            </Form>\n                        </motion.div>\n                    </motion.div>\n                    <motion.div style={{ marginTop: \"1rem\" }} className=\"media\">\n                        <motion.img layoutId={`image ${pathId}`} src={formatImageLink(event.imagePath)} alt=\"image\" />\n                    </motion.div>\n                    <div className=\"description\">\n                        <p>{event.description}</p>\n                    </div>\n                </motion.div>\n            </motion.div>\n        </>\n    )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/Dashboard.js",["209"],"import axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { Bar, HorizontalBar, Line, Pie, Polar } from 'react-chartjs-2';\nimport { useSelector } from 'react-redux';\nimport { Divider, Header, Icon } from 'semantic-ui-react';\nimport { statUrls } from '../../../redux/api';\nimport { AdminList } from '../../AdminList';\n\nexport const Dashboard = () => {\n\n\n  const [incomeData, setIncomeData] = useState({});\n  const [clientAgeData, setClientAgeData] = useState({});\n  const [clientNationalityData, setClientNationalityData] = useState({});\n  const [bookingMonthData, setBookingtMonthData] = useState({});\n  const [bookingEventTypeData, setBookingtEventTypeData] = useState({});\n\n\n  const { user } = useSelector(state => state.userState);\n\n  useEffect(() => {\n\n    const getBookingEventTypeData = async () => {\n      const resp = await axios.get(statUrls.byEventType);\n      setBookingtEventTypeData(resp?.data);\n    }\n\n    const getBookingMonthData = async () => {\n      const resp = await axios.get(statUrls.byBookingMonth);\n      setBookingtMonthData(resp?.data);\n    }\n\n    const getClientNationalityData = async () => {\n      const resp = await axios.get(statUrls.byClientNationality);\n      setClientNationalityData(resp?.data);\n    }\n\n    const getClientAgeData = async () => {\n      const resp = await axios.get(statUrls.byClientAge);\n      setClientAgeData(resp?.data);\n    }\n\n    const getIncome = async () => {\n      const response = await axios.get(statUrls.income);\n      setIncomeData(response?.data);\n    }\n\n    if (user?.role?.name !== \"Client\") {\n\n      getBookingEventTypeData();\n      getBookingMonthData();\n      getClientAgeData();\n      getIncome();\n      getClientNationalityData();\n    }\n\n\n  }, [])\n\n\n  const weekData = {\n    labels: incomeData.weekAvg > 0 ? [2, 3, 2, 8, 7, 8, 15] : [15, 13, 7, 12, 7, 8, 4],\n    datasets: [\n      {\n        backgroundColor: \"rgba(101, 116, 205, 0.1)\",\n        borderColor: \"rgba(101, 116, 205, 0.8)\",\n        borderWidth: 2,\n        data: incomeData.weekAvg > 0 ? [2, 3, 2, 8, 7, 8, 15] : [15, 13, 7, 10, 7, 8, 4],\n      },\n    ],\n  };\n\n  const monthData = {\n    labels: incomeData.monthAvg > 0 ? [2, 3, 2, 8, 7, 9, 15] : [15, 9, 7, 8, 2, 3, 2],\n    datasets: [\n      {\n        backgroundColor: \"rgba(246, 153, 63, 0.1)\",\n        borderColor: \"rgba(246, 153, 63, 0.8)\",\n        borderWidth: 2,\n        data: incomeData.monthAvg > 0 ? [2, 3, 2, 8, 7, 9, 15] : [15, 9, 7, 8, 2, 3, 2],\n      },\n    ],\n  };\n\n  const totalData = {\n    labels: incomeData.totalAvg > 0 ? [2, 4, 5, 8, 12, 9, 20] : [20, 9, 12, 8, 5, 4, 2],\n    datasets: [\n      {\n        backgroundColor: \"rgba(246, 109, 155, 0.1)\",\n        borderColor: \"rgba(246, 109, 155, 0.8)\",\n        borderWidth: 2,\n        data: incomeData.totalAvg > 0 ? [2, 4, 5, 8, 12, 9, 20] : [20, 9, 12, 8, 5, 4, 2],\n      },\n    ],\n  };\n\n  const chartOptions = {\n    maintainAspectRatio: false,\n    legend: {\n      display: false,\n    },\n    tooltips: {\n      enabled: false,\n    },\n    elements: {\n      point: {\n        radius: 0\n      },\n    },\n    scales: {\n      xAxes: [{\n        gridLines: false,\n        scaleLabel: false,\n        ticks: {\n          display: false\n        }\n      }],\n      yAxes: [{\n        gridLines: false,\n        scaleLabel: false,\n        ticks: {\n          display: false,\n          suggestedMin: 0,\n          suggestedMax: 10\n        }\n      }]\n    }\n  };\n\n  const byClientAgeData = {\n    labels: ['18 to 29', '30 to 39', '40 to 65', 'Above 66'],\n    datasets: [\n      {\n        data: [clientAgeData[\"18 to 29\"], clientAgeData[\"30 to 39\"], clientAgeData[\"40 to 65\"], clientAgeData[\"Above 66\"]],\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  }\n\n  const byClientNationalitydata = {\n    labels: Object.keys(clientNationalityData),\n    datasets: [\n      {\n        label: '# of Clients',\n        data: Object.values(clientNationalityData),\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)',\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  }\n\n\n  const byBookingMonthData = {\n    labels: Object.keys(bookingMonthData),\n    datasets: [\n      {\n        label: '# of Bookings',\n        data: Object.values(bookingMonthData),\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.5)',\n          'rgba(54, 162, 235, 0.5)',\n          'rgba(255, 206, 86, 0.5)',\n          'rgba(75, 192, 192, 0.5)',\n          'rgba(153, 102, 255, 0.5)',\n          'rgba(255, 159, 64, 0.5)',\n          'rgb(255, 99, 132)',\n          'rgb(54, 162, 235)',\n          'rgb(75, 192, 192)',\n          'rgba(225, 224, 0, 1)',\n          'rgba(135, 10, 24, 0.5)',\n          'rgba(154, 262, 125, 103.5)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  }\n\n\n\n  const byEventTypeData = {\n    labels: Object.keys(bookingEventTypeData),\n    datasets: [\n      {\n        label: \"# of bookings\",\n        data: Object.values(bookingEventTypeData),\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)',\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  }\n\n  const byEventTypeOptions = {\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n          },\n        },\n      ],\n    },\n  }\n\n\n\n  //Admins Data\n  return (\n\n    <div>\n      <div className=\"header\">\n        <Header as='h2'>\n          <Icon name='chart line' />\n          <Header.Content>\n            Analytics Dashboard\n      <Header.Subheader>Check {user.role.name === \"Admin\" ? \"Your\" : \"All\"} Events Performance </Header.Subheader>\n          </Header.Content>\n        </Header>\n      </div>\n      <Divider />\n      <div className=\"flex items-center justify-center px-5 py-5\">\n        <div className=\"w-full max-w-8xl\">\n          <div className=\"-mx-2 md:flex\">\n            <div className=\"w-full md:w-1/3 px-5\">\n              <div className=\"rounded-lg shadow-sm mb-4\">\n                <div className=\"rounded-lg bg-white shadow-lg md:shadow-xl relative overflow-hidden\">\n                  <div className=\"px-3 pt-8 pb-10 text-center relative z-10\">\n                    <h4 className=\"text-sm uppercase text-gray-500 leading-tight\">Weekly Income</h4>\n                    <h3 className=\"text-3xl text-gray-700 font-semibold leading-tight my-3\">${incomeData.weekIncome}</h3>\n                    <p className={`text-xs $ text-${incomeData.weekAvg < 0 ? \"red\" : \"green\"}-500 leading-tight`}>{incomeData.weekAvg < 0 ? \"▼ \" : \"▲ \"}{incomeData.weekAvg}%</p>\n                  </div>\n                  <div className=\"absolute bottom-0 inset-x-0\">\n                    <Line data={weekData} options={chartOptions} height={55} />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"w-full md:w-1/3 px-2\">\n              <div className=\"rounded-lg shadow-sm mb-4\">\n                <div className=\"rounded-lg bg-white shadow-lg md:shadow-xl relative overflow-hidden\">\n                  <div className=\"px-3 pt-8 pb-10 text-center relative z-10\">\n                    <h4 className=\"text-sm uppercase text-gray-500 leading-tight\">Monthly Income</h4>\n                    <h3 className=\"text-3xl text-gray-700 font-semibold leading-tight my-3\">${incomeData.monthIncome}</h3>\n                    <p className={`text-xs $ text-${incomeData.monthAvg < 0 ? \"red\" : \"green\"}-500 leading-tight`}>{incomeData.monthAvg < 0 ? \"▼ \" : \"▲ \"}{incomeData.monthAvg}%</p>\n                  </div>\n                  <div className=\"absolute bottom-0 inset-x-0\">\n                    <Line data={monthData} options={chartOptions} height={55} />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"w-full md:w-1/3 px-2\">\n              <div className=\"rounded-lg shadow-sm mb-4\">\n                <div className=\"rounded-lg bg-white shadow-lg md:shadow-xl relative overflow-hidden\">\n                  <div className=\"px-3 pt-8 pb-10 text-center relative z-10\">\n                    <h4 className=\"text-sm uppercase text-gray-500 leading-tight\">Total Income</h4>\n                    <h3 className=\"text-3xl text-gray-700 font-semibold leading-tight my-3\">${incomeData.totalIncome}</h3>\n                    <p className={`text-xs $ text-${incomeData.totalAvg < 0 ? \"red\" : \"green\"}-500 leading-tight`}>{incomeData.totalAvg < 0 ? \"▼ \" : \"▲ \"}{incomeData.totalAvg}%</p>\n                  </div>\n                  <div className=\"absolute bottom-0 inset-x-0\">\n                    <Line data={totalData} options={chartOptions} height={55} />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container my-0 mx-auto px-4 md:px-12\">\n        <div className=\"flex flex-wrap -mx-1 lg:-mx-7\">\n\n\n          <div className=\"my-1 px-1 w-full md:w-1/2 lg:my-6 lg:px-9 lg:w-1/2\">\n\n\n            <article className=\"overflow-hidden rounded-lg shadow-lg\">\n\n\n              <header className=\"flex items-center justify-between leading-tight p-2 md:p-4\">\n\n                <p className=\"text-grey-darker text-lg text-center\">\n                  Bookings Classed by Customer Age\n             </p>\n              </header>\n\n              <Pie data={byClientAgeData} />\n\n\n              <footer className=\"flex items-center justify-between leading-none p-2 md:p-4\">\n              </footer>\n\n            </article>\n\n\n          </div>\n          <div className=\"my-1 px-1 w-full md:w-1/2 lg:my-6 lg:px-9 lg:w-1/2\">\n\n\n            <article className=\"overflow-hidden rounded-lg shadow-lg\">\n\n\n              <header className=\"flex items-center justify-between leading-tight p-2 md:p-4\">\n\n                <p className=\"text-grey-darker text-lg text-center\">\n                  Bookings Classed by Customer Country\n                         </p>\n              </header>\n\n              <Bar data={byClientNationalitydata} />\n\n\n              <footer className=\"flex items-center justify-between leading-none p-2 md:p-4\">\n              </footer>\n\n            </article>\n\n\n          </div>\n\n\n\n\n        </div>\n      </div>\n\n      <div className=\"container my-0 mx-auto px-4 md:px-12\">\n        <div className=\"flex flex-wrap -mx-1 lg:-mx-7\">\n\n\n          <div className=\"my-1 px-1 w-full md:w-1/2 lg:my-6 lg:px-9 lg:w-1/2\">\n\n\n            <article className=\"overflow-hidden rounded-lg shadow-lg\">\n\n\n              <header className=\"flex items-center justify-between leading-tight p-2 md:p-4\">\n\n                <p className=\"text-grey-darker text-lg text-center\">\n                  Bookings Classed by Month\n             </p>\n              </header>\n\n              <Polar data={byBookingMonthData} />\n\n\n              <footer className=\"flex items-center justify-between leading-none p-2 md:p-4\">\n              </footer>\n\n            </article>\n\n\n          </div>\n          <div className=\"my-1 px-1 w-full md:w-1/2 lg:my-6 lg:px-9 lg:w-1/2\">\n\n\n            <article className=\"overflow-hidden rounded-lg shadow-lg\">\n\n\n              <header className=\"flex items-center justify-between leading-tight p-2 md:p-4\">\n\n                <p className=\"text-grey-darker text-lg text-center\">\n                  Bookings Classed by Event Type\n                         </p>\n              </header>\n\n              <HorizontalBar data={byEventTypeData} options={byEventTypeOptions} />\n\n              <footer className=\"flex items-center justify-between leading-none p-2 md:p-4\">\n              </footer>\n\n            </article>\n\n\n          </div>\n\n\n\n\n        </div>\n      </div>\n\n      {/* Show Admins list to superAdmin */}\n      {user.role.name === \"SuperAdmin\" &&\n\n        <div className=\"container my-0 mx-auto px-4 md:px-12\">\n          <div className=\"flex flex-wrap -mx-7 lg:-mx-7\">\n\n            <div className=\"min-w-full my-1 px-1 md:w-1/2 lg:my-4 lg:px-4 lg:w-1/3\">\n\n              <article className=\"overflow-hidden rounded-lg shadow-lg\">\n\n\n\n                <header className=\"flex items-center justify-between leading-tight p-2 md:p-4\">\n                  <h1 className=\"text-lg\">\n                    <p className=\"text-grey-darker text-bg text-center\">\n                      Admins List\n             </p>\n                  </h1>\n\n                </header>\n                <AdminList />\n              </article>\n            </div>\n\n          </div>\n        </div>\n      }\n\n    </div>\n\n  )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/Redirect.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/ClientContent.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/ResetPassword.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/AdminList.js",["210"],"import React, { useEffect, useState } from 'react'\nimport { Button, Icon, Table } from 'semantic-ui-react'\nimport { Form, Input, Modal, Select, Tag } from 'antd';\nimport axios from 'axios';\nimport { adminDataUrl, authUrls, lockUnlockAdminUrl } from '../redux/api';\nimport { successToast } from '../common/Notifications';\nimport { toast } from 'react-toastify';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useSelector } from 'react-redux';\n\nexport const AdminList = () => {\n\n    const [adminData, setAdminData] = useState([]);\n\n    const getAdminData = async () => {\n        const response = await axios.get(adminDataUrl);\n        setAdminData(response.data);\n    }\n\n\n\n    const lockUnlockAdmin = (id) => {\n        axios.get(lockUnlockAdminUrl(id)).then((resp) => {\n            successToast(resp.data);\n            getAdminData();\n        }, (error) => {\n            console.log(error);\n            toast.error(error.data);\n        })\n    }\n\n    //Set up admin add Modal\n\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    const openModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const closeModal = () => {\n        setIsModalVisible(false);\n        clearValues();\n    };\n\n    //Admin Attributes\n    const myInitialValues = {\n        displayName: \"\",\n        email: \"\",\n        gender: \"\",\n        country: \"\",\n        age: null\n    }\n\n    //clear form Attributes\n    const clearValues = () => {\n        formik.values.email = \"\";\n        formik.values.country = \"\";\n        formik.values.gender = \"\";\n        formik.values.displayName = \"\";\n        formik.values.age = null;\n    }\n\n    //Set up object validation\n    const myValidationSchema = new Yup.ObjectSchema({\n        displayName: Yup.string().required(),\n        email: Yup.string().email().required(),\n        country: Yup.string().required(),\n        gender: Yup.string().required(),\n        age: Yup.number().required()\n    })\n\n    //Submit method\n    const addAdminHandler = async (values) => {\n        try {\n            const response = await axios.post(authUrls.register, values);\n            if (response) {\n                successToast(response.data);\n                closeModal();\n                getAdminData();\n            }\n        } catch (error) {\n            toast.error(error.data);\n        }\n\n    }\n\n    //Set up formik object to handle the form\n    const formik = useFormik({\n        validationSchema: myValidationSchema,\n        initialValues: myInitialValues,\n\n    })\n\n    useEffect(() => {\n        getAdminData();\n    }, [])\n\n\n    //get  countries\n    const { countries } = useSelector(state => state.userState);\n\n    return (\n        <div style={{ padding: \"0.7rem\" }}>\n            <a onClick={openModal} href=\"#\" className=\"border-2 border-indigo-700 rounded-full float-right font-bold text-indigo-700 px-4 py-3 transition duration-300 ease-in-out hover:bg-indigo-700 hover:text-white mr-6\">\n                New Admin</a>\n            <br />\n            <br />\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Id</Table.HeaderCell>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Email</Table.HeaderCell>\n                        <Table.HeaderCell>Age</Table.HeaderCell>\n                        <Table.HeaderCell>Country</Table.HeaderCell>\n                        <Table.HeaderCell>Total revenue</Table.HeaderCell>\n                        <Table.HeaderCell>Lock/Unlock account</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {adminData?.map(item => {\n                        return <Table.Row key={item.id}>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.displayName}</Table.Cell>\n                            <Table.Cell>{item.email}</Table.Cell>\n                            <Table.Cell>{item.age}</Table.Cell>\n                            <Table.Cell>{item.country}</Table.Cell>\n                            <Table.Cell> <Tag color=\"volcano\">${item.totalRevenue}</Tag> </Table.Cell>\n                            <Table.Cell> <Icon onClick={() => lockUnlockAdmin(item.id)} color={`${item.isAccNonLocked ? \"green\" : \"red\"}`} name={`${item.isAccNonLocked ? \"lock open\" : \"lock\"}`} /></Table.Cell>\n                        </Table.Row>\n                    })}\n                </Table.Body>\n            </Table>\n\n            {/* Add Admin modal  */}\n            <Modal title=\"Add an Admin\"\n                visible={isModalVisible}\n                onCancel={closeModal}\n                footer={[\n                    <Button onClick={closeModal}>\n                        Cancel\n                </Button>,\n                    <Button\n                        disabled={Object.keys(formik.errors).length !== 0}\n                        onClick={() => addAdminHandler(formik.values)}\n                        color=\"purple\">\n                        Add\n                    </Button>,\n                ]}>\n                <Form layout=\"vertical\">\n                    <Form.Item label=\"Email\">\n                        <Input name='email' {...formik.getFieldProps('email')} />\n                        {formik.touched.email && formik.errors.email &&\n                            <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.email}</pre>}\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Display Name\">\n                        <Input name='displayName' {...formik.getFieldProps('displayName')} />\n                        {formik.touched.displayName && formik.errors.displayName &&\n                            <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.displayName}</pre>}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Age\">\n                        <Input name='age' {...formik.getFieldProps('age')} />\n                        {formik.touched.age && formik.errors.age &&\n                            <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.age}</pre>}\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Gender\">\n                        <Select name='gender'\n                            onChange={gender => formik.setFieldValue('gender', gender)}\n                            value={formik.values.gender} >\n                            <Select.Option value=\"Male\">Male</Select.Option>\n                            <Select.Option value=\"Female\">Female</Select.Option>\n                            <Select.Option value=\"Other\">Other</Select.Option>\n                        </Select>\n                        {formik.touched.gender && formik.errors.gender &&\n                            <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.gender}</pre>}\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Country\">\n                        <Select\n                            name='country'\n                            onChange={country => formik.setFieldValue('country', country)}\n                            value={formik.values.country}>\n                            {countries.map(c => {\n                                return <Select.Option key={c.country} value={c.country}>{c.country}</Select.Option>\n                            })}\n                        </Select>\n                        {formik.touched.country && formik.values.country === \"\" && console.log(formik.errors.country)}\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n\n\n\n    )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/Register.js",["211"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/ClientBookings.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/EditProfile.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loadCountries.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/EventsFilterBar.js",["212"],{"ruleId":"213","replacedBy":"214"},{"ruleId":"215","replacedBy":"216"},{"ruleId":"217","severity":1,"message":"218","line":2,"column":10,"nodeType":"219","messageId":"220","endLine":2,"endColumn":14},{"ruleId":"217","severity":1,"message":"221","line":2,"column":16,"nodeType":"219","messageId":"220","endLine":2,"endColumn":21},{"ruleId":"217","severity":1,"message":"222","line":2,"column":23,"nodeType":"219","messageId":"220","endLine":2,"endColumn":29},{"ruleId":"217","severity":1,"message":"223","line":2,"column":31,"nodeType":"219","messageId":"220","endLine":2,"endColumn":39},{"ruleId":"224","severity":1,"message":"225","line":129,"column":17,"nodeType":"226","endLine":129,"endColumn":46},{"ruleId":"227","severity":1,"message":"228","line":106,"column":51,"nodeType":"229","messageId":"230","endLine":106,"endColumn":53},{"ruleId":"217","severity":1,"message":"231","line":2,"column":17,"nodeType":"219","messageId":"220","endLine":2,"endColumn":26},{"ruleId":"217","severity":1,"message":"232","line":18,"column":22,"nodeType":"219","messageId":"220","endLine":18,"endColumn":34},{"ruleId":"217","severity":1,"message":"233","line":71,"column":13,"nodeType":"219","messageId":"220","endLine":71,"endColumn":17},{"ruleId":"234","severity":1,"message":"235","line":19,"column":8,"nodeType":"236","endLine":19,"endColumn":10,"suggestions":"237"},{"ruleId":"234","severity":1,"message":"235","line":18,"column":8,"nodeType":"236","endLine":18,"endColumn":10,"suggestions":"238"},{"ruleId":"227","severity":1,"message":"228","line":49,"column":53,"nodeType":"229","messageId":"230","endLine":49,"endColumn":55},{"ruleId":"217","severity":1,"message":"239","line":17,"column":10,"nodeType":"219","messageId":"220","endLine":17,"endColumn":15},{"ruleId":"217","severity":1,"message":"240","line":24,"column":19,"nodeType":"219","messageId":"220","endLine":24,"endColumn":24},{"ruleId":"234","severity":1,"message":"241","line":58,"column":6,"nodeType":"236","endLine":58,"endColumn":8,"suggestions":"242"},{"ruleId":"224","severity":1,"message":"243","line":105,"column":13,"nodeType":"226","endLine":105,"endColumn":223},{"ruleId":"217","severity":1,"message":"231","line":2,"column":17,"nodeType":"219","messageId":"220","endLine":2,"endColumn":26},{"ruleId":"217","severity":1,"message":"244","line":1,"column":17,"nodeType":"219","messageId":"220","endLine":1,"endColumn":25},"no-native-reassign",["245"],"no-negated-in-lhs",["246"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'Input' is defined but never used.","'Button' is defined but never used.","'Checkbox' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'useEffect' is defined but never used.","'successToast' is defined but never used.","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["247"],["248"],"'toast' is defined but never used.","'token' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user?.role?.name'. Either include it or remove the dependency array.",["249"],"The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"250","fix":"251"},{"desc":"250","fix":"252"},{"desc":"253","fix":"254"},"Update the dependencies array to be: [dispatch]",{"range":"255","text":"256"},{"range":"257","text":"256"},"Update the dependencies array to be: [user?.role?.name]",{"range":"258","text":"259"},[838,840],"[dispatch]",[720,722],[1743,1745],"[user?.role?.name]"]