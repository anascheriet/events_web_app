[{"/Users/anascheriet/Documents/Projects/React/events_web_app/src/index.js":"1","/Users/anascheriet/Documents/Projects/React/events_web_app/src/App.js":"2","/Users/anascheriet/Documents/Projects/React/events_web_app/src/reportWebVitals.js":"3","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Sidebar.js":"4","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/SideBar.js":"5","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/NavBar.js":"6","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Navbar.js":"7","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Content.js":"8","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/rootReducer.js":"9","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/userReducer.js":"10","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/api.js":"11","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/login.js":"12","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/Login.js":"13","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Exemple.js":"14","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/logoutAction.js":"15","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loadUserInfo.js":"16","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loginAction.js":"17","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventTypeReducer.js":"18","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/getTypesAction.js":"19","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/eventTypeCUD.js":"20","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/animations.js":"21","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/eventAction.js":"22","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/Notifications.js":"23","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/loadEventAction.js":"24","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventReducer.js":"25","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventsDashboard.js":"26","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventEditForm.js":"27","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventForm.js":"28","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventTypes.js":"29","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/ClientReducer.js":"30","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/clientActions/getAllEventsAction.js":"31","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/EventsHome.js":"32","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/Event.js":"33","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/util.js":"34","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/EventDetail.js":"35","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/Dashboard.js":"36","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/Redirect.js":"37","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/ClientContent.js":"38","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/ResetPassword.js":"39","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/AdminList.js":"40","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/Register.js":"41","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/ClientBookings.js":"42","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/EditProfile.js":"43","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loadCountries.js":"44","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/EventsFilterBar.js":"45","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/EventsFilterMethod.js":"46","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/Test.js":"47"},{"size":1733,"mtime":1615324051612,"results":"48","hashOfConfig":"49"},{"size":3511,"mtime":1615324222823,"results":"50","hashOfConfig":"49"},{"size":362,"mtime":1610046698593,"results":"51","hashOfConfig":"49"},{"size":901,"mtime":1613239229630,"results":"52","hashOfConfig":"49"},{"size":967,"mtime":1610059435350,"results":"53","hashOfConfig":"54"},{"size":484,"mtime":1610059441419,"results":"55","hashOfConfig":"54"},{"size":2448,"mtime":1615880795015,"results":"56","hashOfConfig":"49"},{"size":283,"mtime":1611756426217,"results":"57","hashOfConfig":"49"},{"size":432,"mtime":1611230950749,"results":"58","hashOfConfig":"49"},{"size":1049,"mtime":1612943924276,"results":"59","hashOfConfig":"49"},{"size":2846,"mtime":1619907361685,"results":"60","hashOfConfig":"49"},{"size":191,"mtime":1610225178281,"results":"61","hashOfConfig":"54"},{"size":5563,"mtime":1614371576149,"results":"62","hashOfConfig":"49"},{"size":3120,"mtime":1610492708884,"results":"63","hashOfConfig":"54"},{"size":230,"mtime":1613910418236,"results":"64","hashOfConfig":"49"},{"size":359,"mtime":1613908561039,"results":"65","hashOfConfig":"49"},{"size":412,"mtime":1612635025885,"results":"66","hashOfConfig":"49"},{"size":341,"mtime":1611161273030,"results":"67","hashOfConfig":"49"},{"size":307,"mtime":1611319663689,"results":"68","hashOfConfig":"49"},{"size":201,"mtime":1610652907595,"results":"69","hashOfConfig":"49"},{"size":553,"mtime":1611257977076,"results":"70","hashOfConfig":"49"},{"size":369,"mtime":1613667032619,"results":"71","hashOfConfig":"49"},{"size":875,"mtime":1613905971507,"results":"72","hashOfConfig":"49"},{"size":479,"mtime":1612635208512,"results":"73","hashOfConfig":"49"},{"size":496,"mtime":1611186851562,"results":"74","hashOfConfig":"49"},{"size":6637,"mtime":1613746001789,"results":"75","hashOfConfig":"49"},{"size":7518,"mtime":1614606872767,"results":"76","hashOfConfig":"49"},{"size":8221,"mtime":1613914898541,"results":"77","hashOfConfig":"49"},{"size":7065,"mtime":1615322323773,"results":"78","hashOfConfig":"49"},{"size":304,"mtime":1611231455512,"results":"79","hashOfConfig":"49"},{"size":304,"mtime":1613238572915,"results":"80","hashOfConfig":"49"},{"size":2554,"mtime":1614606281225,"results":"81","hashOfConfig":"49"},{"size":1499,"mtime":1611781924143,"results":"82","hashOfConfig":"49"},{"size":934,"mtime":1613671002660,"results":"83","hashOfConfig":"49"},{"size":6710,"mtime":1614606619001,"results":"84","hashOfConfig":"49"},{"size":13502,"mtime":1616084211610,"results":"85","hashOfConfig":"49"},{"size":779,"mtime":1612944173152,"results":"86","hashOfConfig":"49"},{"size":292,"mtime":1614371381186,"results":"87","hashOfConfig":"49"},{"size":2753,"mtime":1612634983851,"results":"88","hashOfConfig":"49"},{"size":7913,"mtime":1614602691335,"results":"89","hashOfConfig":"49"},{"size":5368,"mtime":1613914911344,"results":"90","hashOfConfig":"49"},{"size":3348,"mtime":1614373456035,"results":"91","hashOfConfig":"49"},{"size":8990,"mtime":1614605979265,"results":"92","hashOfConfig":"49"},{"size":308,"mtime":1612944376386,"results":"93","hashOfConfig":"49"},{"size":1710,"mtime":1613672406306,"results":"94","hashOfConfig":"49"},{"size":1304,"mtime":1613746124745,"results":"95","hashOfConfig":"49"},{"size":957,"mtime":1614959496176,"results":"96","hashOfConfig":"49"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},"182ss84",{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12qyaxg",{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"99"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"99"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"99"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"99"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"99"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"99"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"99"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"99"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"99"},"/Users/anascheriet/Documents/Projects/React/events_web_app/src/index.js",[],["201","202"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/App.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/reportWebVitals.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Sidebar.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/SideBar.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/NavBar.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Navbar.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Content.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/rootReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/userReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/api.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/login.js",["203","204","205","206"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/Login.js",["207"],"import { motion } from 'framer-motion';\nimport React, { useState } from 'react'\nimport \"./login.scss\"\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login } from '../../redux/actions/Users/loginAction';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Icon } from 'semantic-ui-react';\nimport axios from 'axios';\nimport { authUrls } from '../../redux/api';\nimport { successToast } from '../../common/Notifications';\nimport { toast } from 'react-toastify';\n\nexport const Login = () => {\n\n  //Check if user is logged in\n  const { user } = useSelector(state => state.userState);\n\n  //need a dispatcher that executes the action !!!!!!!!!!:D\n  const dispatch = useDispatch();\n\n  const history = useHistory();\n\n  const initialValues = {\n    username: '',\n    password: ''\n  }\n\n  const ValidationSchema = new Yup.ObjectSchema({\n    username: Yup.string().email().required(\"Email is required\"),\n    password: Yup.string().required()\n    /* password: Yup.string().matches(\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}$\") */\n  })\n\n  const submitHandler = (values) => {\n    dispatch(login(values, history));\n  }\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: ValidationSchema,\n    onSubmit: submitHandler\n  })\n\n  //Forgot Password \n\n  //Set up conditional rendering\n\n  const [forgotForm, setForgotForm] = useState(false);\n\n  const openForgotPass = () => {\n    setForgotForm(true);\n  }\n\n  const closeForgotPass = () => {\n    setForgotForm(false);\n  }\n\n  //Set up forgot password from\n  const forgotInitialValues = {\n    username: '',\n  }\n\n  const forgotValidationSchema = new Yup.ObjectSchema({\n    username: Yup.string().email().required(\"Email is required\"),\n  })\n\n\n\n  const forgotSubmitHandler = async (values) => {\n    try {\n      const resp = await axios.post(authUrls.forgotPassword, values);\n      successToast(resp.data);\n      closeForgotPass();\n      forgotFormik.values.username = '';\n    } catch (error) {\n      toast.error(error.data);\n    }\n  }\n\n  const forgotFormik = useFormik({\n    initialValues: forgotInitialValues,\n    validationSchema: forgotValidationSchema,\n    onSubmit: forgotSubmitHandler\n  })\n\n  //handle show/hide password\n  const [isPassword, setIsPassword] = useState(true);\n\n  const showPassword = () => {\n    setIsPassword(!isPassword);\n  }\n\n  return (\n    <div className=\"all\">\n      <motion.div\n        className=\"logo-container\"\n        initial={{ scale: 0 }}\n        animate={{ scale: 1 }}\n        transition={{ ease: \"backOut\", duration: 1 }}>\n        <div className=\"name\">\n          <h2>eventor</h2>\n        </div>\n        <div className=\"description\">\n          {forgotForm ? <h2 style={{ fontSize: \"25px\" }}>Forgot Password</h2> : <h2>EVENT PLANNING.</h2>}\n          {user === null && forgotForm === false &&\n            <Link to=\"/Guest\" >\n              <button className=\"explore\">Explore Events &nbsp;<Icon size=\"large\" name=\"arrow alternate circle right\" /></button>\n            </Link>}\n        </div>\n      </motion.div>\n\n      {user === null ?\n        (\n          forgotForm ?\n            <div className=\"form\">\n              <form onSubmit={forgotFormik.handleSubmit}>\n                <label className=\"label\">Please Enter Your Email</label>\n                <br />\n                <input type=\"text\" name=\"username\" className=\"input\" {...forgotFormik.getFieldProps(\"username\")} />\n                <br />\n                {forgotFormik.touched.username && forgotFormik.errors.username &&\n                  <span style={{ color: \"red\" }}>{forgotFormik.errors.username}</span>}\n                <br />\n                <button type=\"submit\" className=\"submitBtn\" >Confirm</button>\n              </form>\n              <div className=\"links\">\n                <a onClick={closeForgotPass}>Cancel</a>\n              </div>\n\n            </div>\n            :\n            <div className=\"form\">\n              <form onSubmit={formik.handleSubmit}>\n                <label className=\"label\">EMAIL</label>\n                <br />\n                <input type=\"text\" name=\"username\" className=\"input\" {...formik.getFieldProps(\"username\")} />\n                <br />\n                {formik.touched.username && formik.errors.username &&\n                  <span style={{ color: \"red\" }}>{formik.errors.username}</span>}\n                <br />\n                <label className=\"label\">PASSWORD</label>\n                <br />\n                <input type={isPassword ? \"password\" : \"text\"} name=\"password\" className=\"input\" {...formik.getFieldProps(\"password\")} /> <Icon name={isPassword ? \"eye\" : \"eye slash\"} onClick={showPassword} />\n                <br />\n                {formik.touched.password && formik.errors.password &&\n                  <span style={{ color: \"red\" }}>{formik.errors.password}</span>}\n                <br />\n\n                <button type=\"submit\" className=\"submitBtn\" >Log In</button>\n\n              </form>\n              <div className=\"links\">\n                <Link to=\"/authentication/register\">\n                  <p style={{ color: \"#14213D\" }}>Create Account</p>\n                </Link>\n                <p style={{ color: \"#14213D\", fontWeight: \"bold\", cursor: \"pointer\" }} onClick={openForgotPass}>Forgot Password?</p>\n              </div>\n            </div>) :\n        <div className=\"back\">\n          <h2>{`Welcome Back ${user.displayName} !`}</h2>\n          <Link to=\"/Redirect\">\n            <button>Get Back In</button>\n          </Link>\n        </div>}\n\n\n\n    </div>\n  );\n\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Exemple.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/logoutAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loadUserInfo.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loginAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventTypeReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/getTypesAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/eventTypeCUD.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/animations.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/eventAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/Notifications.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/loadEventAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventsDashboard.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventEditForm.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventForm.js",["208"],"import React, { useState } from 'react'\nimport {\n    Form,\n    Input,\n    Select,\n    DatePicker,\n    InputNumber,\n    Upload,\n    Button as AntdButton\n} from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport \"./eventform.scss\"\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { Button } from 'semantic-ui-react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createEventAction } from '../../../redux/actions/eventActions/eventAction'\nimport { errorToast } from '../../../common/Notifications';\nimport axios from 'axios';\nimport { uploadImageUrl } from '../../../redux/api';\nimport { loadUserInfo } from '../../../redux/actions/Users/loadUserInfo';\n\n//Set up object validation\nexport const myValidationSchema = new Yup.ObjectSchema({\n    eventName: Yup.string().required(),\n    description: Yup.string().required(),\n    country: Yup.string().required(),\n    city: Yup.string().required(),\n    availabletickets: Yup.number().required().positive().integer(),\n    ticketprice: Yup.number().required().positive(),\n    eventtypeid: Yup.number().required(),\n    eventDate: Yup.string().required()\n})\n\nexport const EventForm = ({ closeDrawer, }) => {\n\n    //set uo the dispatcher for different actions\n    const dispatch = useDispatch();\n\n    //retrieve event types array from evTypes reducer\n    const { eventTypes } = useSelector(state => state.eventTypesState);\n\n    //retrieve countries array\n    const { countries } = useSelector(state => state.userState);\n\n    //Country / City Dropdown logic\n    const [Cities, setCities] = useState([]);\n\n    //Set up Event Object\n    const initialValues = {\n        eventName: '',\n        description: '',\n        country: '',\n        city: '',\n        availabletickets: null,\n        ticketprice: null,\n        eventtypeid: null,\n        eventDate: '',\n        image: ''\n    }\n\n    //Set up formik object to handle the form\n    const formik = useFormik({\n        validationSchema: myValidationSchema,\n        initialValues: initialValues,\n    })\n\n    //get events so we can add to them\n    const { user } = useSelector(state => state.userState);\n\n    const clearInputs = () => {\n        formik.values.eventName = '';\n        formik.values.description = '';\n        formik.values.country = '';\n        formik.values.city = '';\n        formik.values.availabletickets = null;\n        formik.values.ticketprice = null;\n        formik.values.eventtypeid = null;\n        formik.values.eventDate = '';\n        formik.values.image = null;\n    }\n\n    //Submit method\n    const submitHandler = (event) => {\n        try {\n            dispatch(createEventAction(event));\n            setTimeout(() => {\n                dispatch(loadUserInfo());\n            }, 1000);\n            closeDrawer();\n            clearInputs();\n        } catch (error) {\n            errorToast(error.data);\n        }\n\n    }\n\n    //Image upload logic\n    const eventImageUpload = async (file) => {\n        let formData = new FormData();\n        formData.append('file', file);\n        let response = await axios.post(uploadImageUrl, formData);\n        //Assign response to image path\n        formik.values.image = response.data;\n    }\n\n    return (\n        <Form\n            className=\"eventForm\"\n            wrapperCol={{ span: 26 }}\n            layout=\"vertical\"\n            onFinish={() => submitHandler(formik.values)}\n        >\n            <Form.Item label=\"Event Name\">\n                <Input name='eventName' {...formik.getFieldProps('eventName')} />\n                {formik.touched.eventName && formik.errors.eventName &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventName}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Type\">\n                <Select\n                    name='eventtypeid'\n                    onChange={evtype => formik.setFieldValue('eventtypeid', evtype)}\n                    value={formik.values.eventtypeid}>\n                    {eventTypes?.map(eType => {\n                        return <Select.Option value={eType.id}>{eType.name}</Select.Option>\n                    })}\n                </Select>\n                {formik.touched.eventtypeid && formik.errors.eventtypeid &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventtypeid}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Country\">\n                <Select\n                    name='country'\n                    onChange={country => formik.setFieldValue('country', country)}\n                    onSelect={country => ((setCities(countries.filter(x => x.country === country)[0].cities), formik.setFieldValue('country', country)))}\n                    value={formik.values.country}>\n                    {countries.map(c => {\n                        return <Select.Option value={c.country}>{c.country}</Select.Option>\n                    })}\n                </Select>\n                {formik.touched.country && formik.values.country === \"\" && console.log(formik.errors.country)}\n            </Form.Item>\n            <Form.Item label=\"City\">\n                <Select\n                    name='city'\n                    onChange={city => (formik.setFieldValue('city', city))}\n                    value={formik.values.city}>\n                    {Cities.map((c, index) => {\n                        return <Select.Option key={index} value={c}>{c}</Select.Option>\n                    })}\n\n                </Select>\n                {formik.touched.city && formik.errors.city &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.city}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Description\">\n                <Input.TextArea name='description' {...formik.getFieldProps('description')} />\n                {formik.touched.description && formik.errors.description &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.description}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Date\">\n                <DatePicker\n                    name='eventDate'\n                    onChange={date => (formik.setFieldValue('eventDate', date))}\n                    value={formik.values.eventDate}\n                    className=\"input\"\n                    showTime\n                    format=\"YYYY-MM-DD HH:mm:ss\" />\n                {formik.touched.eventDate && formik.errors.eventDate &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventDate}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Ticket Price\">\n                <InputNumber\n                    name='ticketprice'\n                    onChange={price => formik.setFieldValue('ticketprice', price)}\n                    value={formik.values.ticketprice}\n                    style={{ width: \"25.2rem\" }} />\n                {formik.touched.ticketprice && formik.errors.ticketprice &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.ticketprice}</pre>}\n            </Form.Item>\n            <Form.Item label=\"No of available tickets\">\n                <Input\n                    name='availabletickets'\n                    /* onChange={tickets => formik.setFieldValue('availabletickets', tickets)} */\n                    {...formik.getFieldProps('availabletickets')}\n                    value={formik.values.availabletickets}\n                    style={{ width: \"25.2rem\" }} />\n                {formik.touched.availabletickets && formik.errors.availabletickets &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.availabletickets}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Image\">\n                <Upload name='image' action={eventImageUpload}>\n                    <AntdButton icon={<UploadOutlined />}>Click to Upload</AntdButton>\n                </Upload>\n            </Form.Item>\n            <Form.Item >\n                <Button color=\"green\" disabled={Object.keys(formik.errors).length !== 0} type=\"submit\">Submit</Button>\n                <Button color=\"grey\" type=\"button\" onClick={closeDrawer}>Cancel</Button>\n            </Form.Item>\n        </Form>\n    )\n\n\n}\n\n\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventTypes.js",["209"],"import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Button, Header, Icon, Table, Divider } from 'semantic-ui-react'\nimport { Tag, Modal, Form, Input } from 'antd';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport axios from 'axios';\nimport { eventTypesUrls } from '../../../redux/api'\nimport { editToast, errorToast, successToast } from '../../../common/Notifications';\nimport { getAllEventTypes } from '../../../redux/actions/eventTypes/getTypesAction';\nimport { createEventTypeAction } from '../../../redux/actions/eventTypes/eventTypeCUD'\n\nexport const EventTypes = () => {\n\n    const dispatch = useDispatch();\n    const { eventTypes } = useSelector(state => state.eventTypesState);\n    useEffect(() => {\n        dispatch(getAllEventTypes());\n    }, []);\n\n\n    const [editMode, setEditMode] = useState(false);\n\n    //Add event type modal\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    const openModalforAdd = () => {\n        setEditMode(false);\n        setIsModalVisible(true);\n        formik.values.name = \"\";\n        formik.values.id = 0;\n    };\n\n\n\n    const openModalforEdit = async (id) => {\n        const eventT = await axios.get(eventTypesUrls.details(id));\n        formik.values.name = eventT.data.name;\n        formik.values.id = eventT.data.id;\n        setEditMode(true);\n        setIsModalVisible(true);\n    };\n\n    //Edit Submit Handler\n    const editHandler = async () => {\n        await axios.put(eventTypesUrls.edit(formik.values.id), formik.values);\n        setIsModalVisible(false);\n        editToast(\"Event Type updated ! ✅\");\n    }\n\n\n    const closeModal = () => {\n        setIsModalVisible(false);\n    };\n\n    //Delete Modal\n    const [isDModalVisible, setIsDModalVisible] = useState(false);\n    const openDModal = () => {\n        setIsDModalVisible(true);\n    };\n\n    const closeDModal = () => {\n        setIsDModalVisible(false);\n    };\n\n    //Load event Type\n    const [getEvType, setGetEvType] = useState({})\n\n    const loadEType = async (id) => {\n        const eventT = await axios.get(eventTypesUrls.details(id));\n        setGetEvType({ ...getEvType, ...eventT.data });\n        console.log(getEvType);\n        openDModal();\n    }\n\n    const deleteETypeHandle = async (id) => {\n        try {\n            const resp = await axios.delete(eventTypesUrls.delete(id));\n            editToast(resp.data);\n            eventTypes.filter(x => x.id !== id);\n            eventTypes.splice(eventTypes.findIndex(x => x.id === id), 1);\n            closeDModal();\n        } catch (error) {\n            errorToast(error.data);\n        }\n    }\n\n\n\n    //Form handling \n\n    //Initial Values\n    const myInitialValues = { name: '' };\n\n    //Validation\n    const myValidationSchema = new Yup.object({\n        name: Yup.string().required(),\n    })\n\n    //Form handler\n    const formik = useFormik({\n        validationSchema: myValidationSchema,\n        initialValues: myInitialValues\n    })\n\n    //Create Submit eType handler\n    const submitHandler = (eType) => {\n        //eType.id = eventTypes[eventTypes.length - 1].id + 1;\n        dispatch(createEventTypeAction(eType));\n        //eventTypes.push(eType);\n        setIsModalVisible(false);\n        successToast(\"Event Type has been Added ! 👌\");\n\n        setTimeout(() => {\n            dispatch(getAllEventTypes());\n        }, 1000);\n\n        //dispatch(getAllEventTypes());\n    }\n\n\n    return (\n        <div>\n            <div className=\"header\">\n                <Header as='h2'>\n                    <Icon style={{ marginTop: \"0.7rem\" }} name='list' />\n                    <Header.Content>\n                        Event Types List\n                        <Header.Subheader>Manage event categories</Header.Subheader>\n                    </Header.Content>\n                </Header>\n                <Button onClick={openModalforAdd} color=\"green\"><Icon name=\"calendar plus\" /> Create new Event Type</Button>\n            </div>\n            <Divider />\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Category Id</Table.HeaderCell>\n                        <Table.HeaderCell>Category Name</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {eventTypes?.map(item => {\n                        return <Table.Row key={item.id}>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell>\n                                <Icon onClick={() => openModalforEdit(item.id)} name=\"edit\" title=\"Edit\" color=\"blue\" size=\"large\" />\n                                &nbsp;&nbsp;\n                                <Icon onClick={() => loadEType(item.id)} style={{ cursor: 'pointer' }} size=\"large\" title=\"Delete\" name=\"trash\" color=\"red\" /></Table.Cell>\n                        </Table.Row>\n                    })}\n                </Table.Body>\n            </Table>\n\n\n            {/* Add Event type modal  */}\n            <Modal title={editMode ? \"Update Event\" : \"Add an Event Type\"}\n                visible={isModalVisible}\n                onCancel={closeModal}\n                footer={[\n                    <Button onClick={closeModal}>\n                        Cancel\n                </Button>,\n                    <Button\n                        data-testid=\"submit-button\"\n                        disabled={Object.keys(formik.errors).length !== 0}\n                        onClick={() => editMode ? editHandler() : submitHandler(formik.values)}\n                        color={editMode ? \"blue\" : \"green\"}>\n                        {editMode ? \"Update\" : \"Create\"}\n                    </Button>,\n                ]}>\n                <Form layout=\"vertical\">\n                    <Form.Item\n                        label=\"Type Name\">\n                        <Input placeholder=\"Event type name ...\" name='name' {...formik.getFieldProps('name')} />\n                        {formik.touched.name && formik.errors.name && <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.name}</pre>}\n                    </Form.Item>\n                </Form>\n            </Modal>\n\n\n            {/* Delete evType Modal */}\n            <Modal title='Delete Event Type'\n                visible={isDModalVisible}\n                onCancel={closeDModal}\n                footer={[\n                    <Button onClick={closeDModal}>\n                        Cancel\n                </Button>,\n                    <Button\n                        onClick={() => deleteETypeHandle(getEvType.id)}\n                        color=\"red\">\n                        Delete\n                </Button>,\n                ]}>\n                <h3>Are you sure you want to delete Event Type: <Tag style={{ fontSize: \"20px\" }} color=\"red\">{getEvType.name}</Tag></h3>\n            </Modal>\n\n        </div>\n    )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/ClientReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/clientActions/getAllEventsAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/EventsHome.js",["210"],"import { motion, AnimatePresence, AnimateSharedLayout } from 'framer-motion';\nimport React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { Event } from \"./Event\"\nimport { EventDetail } from './EventDetail';\nimport \"./EventHome.scss\"\nimport \"../../searchItems.scss\";\nimport { getAllEventsAction } from '../../../redux/actions/clientActions/getAllEventsAction';\nimport { contains } from '../../../common/util';\nimport { EventsFilterBar } from '../../../common/EventsFilterBar';\nimport filterEvents from \"../../../common/EventsFilterMethod\"\nexport const EventsHome = () => {\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getAllEventsAction());\n    }, [])\n    //get current location\n    const location = useLocation();\n    const pathId = location.pathname.split(\"/\")[2];\n\n    //get events from the state\n    const { availableEvents } = useSelector(state => state.clientState);\n\n    //set up search inputs (event name, event type, event country)\n    const [searchedEName, setSearchedEName] = useState(\"\");\n    const [searchedECountry, setSearchedECountry] = useState(\"\");\n    const [searchedECity, setSearchedECity] = useState(\"\");\n\n    return (\n        <motion.div className=\"eventList\" style={{ marginTop: location.pathname === \"/Guest\" ? \"3rem\" : \"1rem\" }}>\n            <AnimateSharedLayout type=\"switch\">\n                {/* wrap all the components that will be transitioning*/}\n                <AnimatePresence>\n                    {/* The component that will be animated should have a conditional toggle, pathId here */}\n                    {pathId && <EventDetail key={pathId} pathId={pathId} />}\n                </AnimatePresence>\n                <h2 style={{ padding: \"0.3rem\", marginTop: \"3rem\" }}>Upcoming events</h2>\n\n                {/* Filter component */}\n                <EventsFilterBar setSearchedECity={setSearchedECity} searchedECity={searchedECity} setSearchedECountry={setSearchedECountry} searchedECountry={searchedECountry} setSearchedEName={setSearchedEName} searchedEName={searchedEName} />\n\n                <motion.div className=\"events\" >\n                    {filterEvents(availableEvents, contains, searchedEName, \"eventName\", searchedECity, \"city\", searchedECountry, \"country\").map((event) => {\n                        return <Event key={event.event.id} event={event.event} />\n                    })}\n                </motion.div>\n            </AnimateSharedLayout>\n        </motion.div>\n    )\n}","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/Event.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/util.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/EventDetail.js",["211","212"],"import { motion } from 'framer-motion';\nimport React from 'react'\nimport { useSelector } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { Divider, Icon } from 'semantic-ui-react';\nimport { formatDate, formatImageLink } from '../../../common/util';\nimport \"./eventDetail.scss\";\nimport emptyStar from \"../../../../src/Layout/img/star-empty.svg\";\nimport fullStar from \"../../../../src/Layout/img/star-full.svg\";\nimport { Form, InputNumber } from 'antd';\nimport { Button } from 'semantic-ui-react';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport axios from 'axios';\nimport { clientUrls } from '../../../redux/api';\nimport { errorToast, successToast } from '../../../common/Notifications';\nimport { toast } from 'react-toastify';\n\n\nexport const EventDetail = ({ pathId }) => {\n\n    const { event } = useSelector(state => state.eventState);\n    const { user, token } = useSelector(state => state.userState);\n    const history = useHistory();\n\n    const exitCardHandler = (e) => {\n        const element = e.target;\n        if (element.classList.contains('card-shadow')) {\n            document.body.style.overflow = 'auto';\n        }\n        if (user === null) {\n            history.push(\"/Guest/\");\n        }\n        else {\n            history.push(\"/Home/\");\n        }\n\n    }\n\n    const stopevent = (e) => {\n        //make game detail card unclickable\n        e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n    }\n\n\n    const getStars = () => {\n        let length = event.clientReservations.length;\n        let stars = [];\n\n        if (length === 0) {\n            for (let i = 0; i < 5; i++) {\n                stars.push(<img key={i} alt=\"star\" src={emptyStar} />)\n            }\n        } else if (length > 13) {\n            for (let i = 0; i < 5; i++) {\n                stars.push(<img key={i} alt=\"star\" src={fullStar} />)\n            }\n        } else if (length >= 1 && length <= 5) {\n            for (let i = 0; i < 1; i++) {\n                stars.push(<img key={i} alt=\"star\" src={fullStar} />)\n            }\n            for (let i = 0; i < 4; i++) {\n                stars.push(<img key={i} alt=\"star\" src={emptyStar} />)\n            }\n        } else if (length > 5 && length <= 10) {\n            for (let i = 0; i < 2; i++) {\n                stars.push(<img key={i} alt=\"star\" src={fullStar} />)\n            }\n            for (let i = 0; i < 3; i++) {\n                stars.push(<img key={i} alt=\"star\" src={emptyStar} />)\n            }\n\n        } else if (length > 10) {\n            for (let i = 0; i < 4; i++) {\n                stars.push(<img key={i} alt=\"star\" src={fullStar} />)\n            }\n            for (let i = 0; i < 1; i++) {\n                stars.push(<img key={i} alt=\"star\" src={emptyStar} />)\n            }\n        }\n        return stars;\n    }\n\n    //Set up Booking form\n\n\n\n    const myValidationSchema = new Yup.ObjectSchema({\n        numOfPeople: Yup.number().required(),\n        eventid: Yup.number().required(),\n    })\n\n    const myInitialValues = {\n        numOfPeople: null,\n        eventid: pathId\n    }\n\n    const formik = useFormik({\n        initialValues: myInitialValues,\n        validationSchema: myValidationSchema\n    })\n\n\n    const bookEventHandler = async (values) => {\n        console.log(values);\n\n        try {\n            const response = await axios.post(clientUrls.book, values);\n            successToast(response?.data);\n            document.body.style.overflow = 'auto';\n            history.push(\"/Home/\");\n        } catch (error) {\n            errorToast(error.data);\n        }\n\n\n    }\n\n    return (\n        <>\n            <motion.div\n                className=\"card-shadow\" onClick={(e) => exitCardHandler(e)}>\n                <motion.div\n                    onClick={stopevent}\n                    layoutId={pathId}\n                    key={pathId}\n                    /* I added the layoutId because framer motion needs an id for each component it uses */\n                    className=\"detail\"\n                >\n                    <motion.div className=\"stats\">\n                        <motion.div className=\"rating\"  >\n                            <motion.h3 layoutId={`name ${pathId}`} style={{ fontSize: \"2rem\", marginBottom: \"0rem\", marginTop: \"0rem\" }} >{event.eventName}</motion.h3>\n                            <Divider style={{ margin: \"0rem 0rem\", marginBottom: \"0.5rem\" }} />\n                            <motion.h4 style={{ fontSize: \"2rem\", marginBottom: \"0rem\", marginTop: \"0rem\" }}><Icon name=\"dollar\" />{event.ticketPrice}</motion.h4>\n                            <Divider style={{ margin: \"1rem 0rem\", padding: \"0rem 0rem\" }} />\n                            <motion.p style={{ marginBottom: \"0.5rem\" }} >Popularity: {/* {game.rating} */}</motion.p>\n                            {getStars()}\n                        </motion.div>\n                        <motion.div style={{ marginTop: \"2rem\" }} className=\"info\" >\n                            <motion.p layoutId={`location ${pathId}`}><Icon name=\"map pin\" />{event.city}, {event.country}</motion.p>\n                            <motion.p layoutId={`date ${pathId}`}>{formatDate(event.eventDate)}</motion.p>\n                            <Divider />\n                            <Form layout=\"vertical\" onFinish={() => bookEventHandler(formik.values)} style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n                                <Form.Item style={{ left: \"2rem\", marginBottom: \"0.5rem\" }}>\n                                    <InputNumber name=\"numOfPeople\" onChange={(numOfPeople) => formik.setFieldValue(\"numOfPeople\", numOfPeople)} placeholder=\"Number Of Tickets\" style={{ width: \"12rem\" }} />\n                                </Form.Item>\n                                <Button disabled={formik.values.numOfPeople === null || formik.values.numOfPeople === 0 || user === null} style={{ width: \"8rem\", backgroundColor: \"#ff7676\", color: \"white\", marginTop: \"0.5rem\" }} type=\"submit\">Book</Button>\n                                {formik.values.numOfPeople !== null && user === null && <span style={{ color: \"red\" }}>Please Log In before Booking</span>}\n                            </Form>\n                        </motion.div>\n                    </motion.div>\n                    <motion.div style={{ marginTop: \"1rem\" }} className=\"media\">\n                        <motion.img layoutId={`image ${pathId}`} src={formatImageLink(event.imagePath)} alt=\"image\" />\n                    </motion.div>\n                    <div className=\"description\">\n                        <p>{event.description}</p>\n                    </div>\n                </motion.div>\n            </motion.div>\n        </>\n    )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/Dashboard.js",["213"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/Redirect.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/ClientContent.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/ResetPassword.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/AdminList.js",["214"],"import React, { useEffect, useState } from 'react'\nimport { Button, Icon, Table } from 'semantic-ui-react'\nimport { DatePicker, Form, Input, Modal, Select, Tag } from 'antd';\nimport axios from 'axios';\nimport { adminDataUrl, authUrls, lockUnlockAdminUrl } from '../redux/api';\nimport { successToast } from '../common/Notifications';\nimport { toast } from 'react-toastify';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useSelector } from 'react-redux';\n\nexport const AdminList = () => {\n\n    const [adminData, setAdminData] = useState([]);\n\n    const getAdminData = async () => {\n        const response = await axios.get(adminDataUrl);\n        setAdminData(response.data);\n    }\n\n    const lockUnlockAdmin = (id) => {\n        axios.get(lockUnlockAdminUrl(id)).then((resp) => {\n            successToast(resp.data);\n            getAdminData();\n        }, (error) => {\n            console.log(error);\n            toast.error(error.data);\n        })\n    }\n\n    //Set up admin add Modal\n\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    const openModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const closeModal = () => {\n        setIsModalVisible(false);\n        clearValues();\n    };\n\n    //Admin Attributes\n    const myInitialValues = {\n        displayName: \"\",\n        email: \"\",\n        gender: \"\",\n        country: \"\",\n        birthDate: null\n    }\n\n    //clear form Attributes\n    const clearValues = () => {\n        formik.values.email = \"\";\n        formik.values.country = \"\";\n        formik.values.gender = \"\";\n        formik.values.displayName = \"\";\n    }\n\n    //Set up object validation\n    const myValidationSchema = new Yup.ObjectSchema({\n        displayName: Yup.string().required(),\n        email: Yup.string().email().required(),\n        country: Yup.string().required(),\n        gender: Yup.string().required(),\n        birthDate: Yup.string().required()\n    })\n\n    //Submit method\n    const addAdminHandler = async (values) => {\n        try {\n            const response = await axios.post(authUrls.register, values);\n            if (response) {\n                successToast(response.data);\n                closeModal();\n                getAdminData();\n            }\n        } catch (error) {\n            toast.error(error.data);\n        }\n    }\n\n    //Set up formik object to handle the form\n    const formik = useFormik({\n        validationSchema: myValidationSchema,\n        initialValues: myInitialValues,\n\n    })\n\n    useEffect(() => {\n        getAdminData();\n    }, [])\n\n\n    //get  countries\n    const { countries } = useSelector(state => state.userState);\n\n    return (\n        <div style={{ padding: \"0.7rem\" }}>\n            <a onClick={openModal} href=\"#\" className=\"border-2 border-indigo-700 rounded-full float-right font-bold text-indigo-700 px-4 py-3 transition duration-300 ease-in-out hover:bg-indigo-700 hover:text-white mr-6\">\n                New Admin</a>\n            <br />\n            <br />\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Id</Table.HeaderCell>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Email</Table.HeaderCell>\n                        <Table.HeaderCell>Age</Table.HeaderCell>\n                        <Table.HeaderCell>Country</Table.HeaderCell>\n                        <Table.HeaderCell>Total revenue</Table.HeaderCell>\n                        <Table.HeaderCell>Lock/Unlock account</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {adminData?.map(item => {\n                        return <Table.Row key={item.id}>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.displayName}</Table.Cell>\n                            <Table.Cell>{item.email}</Table.Cell>\n                            <Table.Cell>{item.age}</Table.Cell>\n                            <Table.Cell>{item.country}</Table.Cell>\n                            <Table.Cell> <Tag color=\"volcano\">${item.totalRevenue}</Tag> </Table.Cell>\n                            <Table.Cell> <Icon onClick={() => lockUnlockAdmin(item.id)} color={`${item.isAccNonLocked ? \"green\" : \"red\"}`} name={`${item.isAccNonLocked ? \"lock open\" : \"lock\"}`} /></Table.Cell>\n                        </Table.Row>\n                    })}\n                </Table.Body>\n            </Table>\n\n            {/* Add Admin modal  */}\n            <Modal title=\"Add an Admin\"\n                visible={isModalVisible}\n                onCancel={closeModal}\n                footer={[\n                    <Button onClick={closeModal}>\n                        Cancel\n                </Button>,\n                    <Button\n                        disabled={Object.keys(formik.errors).length > 1}\n                        onClick={() => addAdminHandler(formik.values)}\n                        color=\"purple\">\n                        Add\n                    </Button>,\n                ]}>\n                <Form layout=\"vertical\">\n                    <Form.Item label=\"Email\">\n                        <Input name='email' {...formik.getFieldProps('email')} />\n                        {formik.touched.email && formik.errors.email &&\n                            <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.email}</pre>}\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Display Name\">\n                        <Input name='displayName' {...formik.getFieldProps('displayName')} />\n                        {formik.touched.displayName && formik.errors.displayName &&\n                            <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.displayName}</pre>}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Birth Date\">\n                        <DatePicker name=\"birthDate\" style={{ width: '100%' }} onChange={birthDate => (formik.setFieldValue('birthDate', birthDate._d))} />\n                        {/*  <Input name='age' {...formik.getFieldProps('age')} />\n                        {formik.touched.age && formik.errors.age &&\n                            <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.age}</pre>} */}\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Gender\">\n                        <Select name='gender'\n                            onChange={gender => formik.setFieldValue('gender', gender)}\n                            value={formik.values.gender} >\n                            <Select.Option value=\"Male\">Male</Select.Option>\n                            <Select.Option value=\"Female\">Female</Select.Option>\n                            <Select.Option value=\"Other\">Other</Select.Option>\n                        </Select>\n                        {formik.touched.gender && formik.errors.gender &&\n                            <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.gender}</pre>}\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Country\">\n                        <Select\n                            name='country'\n                            onChange={country => formik.setFieldValue('country', country)}\n                            value={formik.values.country}>\n                            {countries.map(c => {\n                                return <Select.Option key={c.country} value={c.country}>{c.country}</Select.Option>\n                            })}\n                        </Select>\n                        {formik.touched.country && formik.values.country === \"\" && console.log(formik.errors.country)}\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n\n    )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/Register.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/ClientBookings.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/EditProfile.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loadCountries.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/EventsFilterBar.js",["215"],"import React, { useState } from 'react'\n\nexport const EventsFilterBar = ({ setSearchedEName, searchedEName, setSearchedECountry, searchedECountry, setSearchedECity, searchedECity }) => {\n\n\n    //Clear filters\n    const clearFilters = () => {\n        setSearchedECity(\"\");\n        setSearchedECountry(\"\");\n        setSearchedEName(\"\");\n\n        //console.table(searchedECountry, searchedEName);\n    }\n\n\n\n\n   \n    return (\n        <div className=\"flex flex-row space-x-10 items-center\">\n            <div className=\"styled-input wide multi\">\n                <div >\n                    <input type=\"text\" value={searchedEName} name=\"fn\" id=\"fn\" autoComplete=\"off\" data-placeholder-focus=\"false\" required onChange={(e) => setSearchedEName(e.target.value)} />\n                    <label>Event Name</label>\n                </div>\n                <div>\n                    <input type=\"text\" value={searchedECountry} name=\"fn\" id=\"fn\" autoComplete=\"off\" data-placeholder-focus=\"false\" required onChange={(e) => setSearchedECountry(e.target.value)} />\n                    <label>Country</label>\n                </div>\n\n                <div >\n                    <input type=\"text\" value={searchedECity} name=\"ln\" id=\"ln\" autoComplete=\"off\" data-placeholder-focus=\"false\" required\n                        onChange={(e) => setSearchedECity(e.target.value)} />\n                    <label>City</label>\n                </div>\n            </div>\n            <div >\n                <button onClick={clearFilters} className=\"bg-pink-500 hover:bg-pink-700 text-white text-md rounded-lg w-32 h-20 focus:outline-none focus:ring-2 focus:ring-pink-600 focus:ring-opacity-50\">Clear</button>\n            </div>\n        </div>\n    )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/EventsFilterMethod.js",["216"],"const filterEvents = (arr, containsMethod, nameInput, nameProp, cityInput, cityProp, countryInput, countryProp) => {\n    return arr.filter((item) => {\n        if (containsMethod(item, nameProp, nameInput) && cityInput === \"\" && countryInput === \"\") {\n            return item;\n        }\n        else if (containsMethod(item, countryProp, countryInput) && cityInput === \"\" && nameInput === \"\") {\n            return item;\n        }\n        else if (containsMethod(item, cityProp, cityInput) && nameInput === \"\" && countryInput === \"\") {\n            return item;\n        }\n        else if (containsMethod(item, nameProp, nameInput) && containsMethod(item, cityProp, cityInput) && countryInput === \"\") {\n            return item;\n        }\n\n        else if (containsMethod(item, nameProp, nameInput) && containsMethod(item, countryProp, countryInput) && cityInput === \"\") {\n            return item;\n        }\n        else if (containsMethod(item, cityProp, cityInput) && containsMethod(item, countryProp, countryInput) && nameInput === \"\") {\n            return item;\n        }\n        else if (containsMethod(item, nameProp, nameInput) && containsMethod(item, countryProp, countryInput) && containsMethod(item, cityProp, cityInput)) {\n            return item;\n        }\n    })\n};\n\n\nexport default filterEvents;","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/Test.js",["217"],"import axios from 'axios';\nimport React, { useEffect, useState } from 'react'\nimport \"./test.scss\"\n\nexport const Test = () => {\n\n    const [data, setData] = useState([]);\n    const getData = async () => {\n        const resp = await axios.get(\"http://localhost:8080/tests/\");\n        setData(resp.data);\n        console.log(data);\n    }\n\n    useEffect(() => {\n        getData();\n    }, [])\n\n    return (\n        <div className=\"allcards\">\n            {data.map(item => {\n                return (\n                    <div className=\"card\" style={{ border: `1px ${item.color} solid` }}>\n                        <span style={{ color: `${item.color}`, fontSize: \"1.7rem\" }}> {item.color} Team Size</span>\n                        <div className=\"cardinfo\">\n                            <p>Dev Members</p>\n                            <span>{item.teamMembers}</span>\n                        </div>\n                    </div>)\n            })}\n        </div>\n\n    )\n}\n",{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","severity":1,"message":"223","line":2,"column":10,"nodeType":"224","messageId":"225","endLine":2,"endColumn":14},{"ruleId":"222","severity":1,"message":"226","line":2,"column":16,"nodeType":"224","messageId":"225","endLine":2,"endColumn":21},{"ruleId":"222","severity":1,"message":"227","line":2,"column":23,"nodeType":"224","messageId":"225","endLine":2,"endColumn":29},{"ruleId":"222","severity":1,"message":"228","line":2,"column":31,"nodeType":"224","messageId":"225","endLine":2,"endColumn":39},{"ruleId":"229","severity":1,"message":"230","line":129,"column":17,"nodeType":"231","endLine":129,"endColumn":46},{"ruleId":"222","severity":1,"message":"232","line":69,"column":13,"nodeType":"224","messageId":"225","endLine":69,"endColumn":17},{"ruleId":"233","severity":1,"message":"234","line":19,"column":8,"nodeType":"235","endLine":19,"endColumn":10,"suggestions":"236"},{"ruleId":"233","severity":1,"message":"234","line":19,"column":8,"nodeType":"235","endLine":19,"endColumn":10,"suggestions":"237"},{"ruleId":"222","severity":1,"message":"238","line":17,"column":10,"nodeType":"224","messageId":"225","endLine":17,"endColumn":15},{"ruleId":"222","severity":1,"message":"239","line":23,"column":19,"nodeType":"224","messageId":"225","endLine":23,"endColumn":24},{"ruleId":"233","severity":1,"message":"240","line":58,"column":6,"nodeType":"235","endLine":58,"endColumn":8,"suggestions":"241"},{"ruleId":"229","severity":1,"message":"242","line":101,"column":13,"nodeType":"231","endLine":101,"endColumn":223},{"ruleId":"222","severity":1,"message":"243","line":1,"column":17,"nodeType":"224","messageId":"225","endLine":1,"endColumn":25},{"ruleId":"244","severity":1,"message":"245","line":2,"column":30,"nodeType":"246","messageId":"247","endLine":2,"endColumn":32},{"ruleId":"233","severity":1,"message":"248","line":16,"column":8,"nodeType":"235","endLine":16,"endColumn":10,"suggestions":"249"},"no-native-reassign",["250"],"no-negated-in-lhs",["251"],"no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'Input' is defined but never used.","'Button' is defined but never used.","'Checkbox' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'user' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["252"],["253"],"'toast' is defined but never used.","'token' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user?.role?.name'. Either include it or remove the dependency array.",["254"],"The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["255"],"no-global-assign","no-unsafe-negation",{"desc":"256","fix":"257"},{"desc":"256","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},"Update the dependencies array to be: [dispatch]",{"range":"263","text":"264"},{"range":"265","text":"264"},"Update the dependencies array to be: [user?.role?.name]",{"range":"266","text":"267"},"Update the dependencies array to be: [getData]",{"range":"268","text":"269"},[838,840],"[dispatch]",[782,784],[1743,1745],"[user?.role?.name]",[385,387],"[getData]"]