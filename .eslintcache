[{"/Users/anascheriet/Documents/Projects/React/events_web_app/src/index.js":"1","/Users/anascheriet/Documents/Projects/React/events_web_app/src/App.js":"2","/Users/anascheriet/Documents/Projects/React/events_web_app/src/reportWebVitals.js":"3","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Sidebar.js":"4","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/SideBar.js":"5","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/NavBar.js":"6","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Navbar.js":"7","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Content.js":"8","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/rootReducer.js":"9","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/userReducer.js":"10","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/api.js":"11","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/login.js":"12","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/Login.js":"13","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Exemple.js":"14","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/logoutAction.js":"15","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loadUserInfo.js":"16","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loginAction.js":"17","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventTypeReducer.js":"18","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/getTypesAction.js":"19","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/eventTypeCUD.js":"20","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/animations.js":"21","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/CountryCityDATA.js":"22","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/eventAction.js":"23","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/Notifications.js":"24","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/loadEventAction.js":"25","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventReducer.js":"26","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventsDashboard.js":"27","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventEditForm.js":"28","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventForm.js":"29","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventTypes.js":"30","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/ClientReducer.js":"31","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/clientActions/getAllEventsAction.js":"32","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/EventsHome.js":"33","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/Event.js":"34","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/util.js":"35","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/EventDetail.js":"36","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/Dashboard.js":"37","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/Redirect.js":"38","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/ClientContent.js":"39","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/ResetPassword.js":"40","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/AdminList.js":"41","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/Register.js":"42","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/ClientBookings.js":"43","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/EditProfile.js":"44","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loadCountries.js":"45"},{"size":1733,"mtime":1611419902885,"results":"46","hashOfConfig":"47"},{"size":3333,"mtime":1612941695386,"results":"48","hashOfConfig":"47"},{"size":362,"mtime":1610046698593,"results":"49","hashOfConfig":"47"},{"size":957,"mtime":1611770119258,"results":"50","hashOfConfig":"47"},{"size":967,"mtime":1610059435350,"results":"51","hashOfConfig":"47"},{"size":484,"mtime":1610059441419,"results":"52","hashOfConfig":"47"},{"size":2365,"mtime":1612941764607,"results":"53","hashOfConfig":"47"},{"size":283,"mtime":1611756426217,"results":"54","hashOfConfig":"47"},{"size":432,"mtime":1611230950749,"results":"55","hashOfConfig":"47"},{"size":1049,"mtime":1612943924276,"results":"56","hashOfConfig":"47"},{"size":2693,"mtime":1612635442884,"results":"57","hashOfConfig":"47"},{"size":191,"mtime":1610225178281,"results":"58","hashOfConfig":"47"},{"size":5180,"mtime":1612635017129,"results":"59","hashOfConfig":"47"},{"size":3120,"mtime":1610492708884,"results":"60","hashOfConfig":"47"},{"size":230,"mtime":1611425673266,"results":"61","hashOfConfig":"47"},{"size":359,"mtime":1612635356464,"results":"62","hashOfConfig":"47"},{"size":412,"mtime":1612635025885,"results":"63","hashOfConfig":"47"},{"size":341,"mtime":1611161273030,"results":"64","hashOfConfig":"47"},{"size":307,"mtime":1611319663689,"results":"65","hashOfConfig":"47"},{"size":201,"mtime":1610652907595,"results":"66","hashOfConfig":"47"},{"size":553,"mtime":1611257977076,"results":"67","hashOfConfig":"47"},{"size":1032381,"mtime":1610998461066,"results":"68","hashOfConfig":"47"},{"size":173,"mtime":1611161749133,"results":"69","hashOfConfig":"47"},{"size":875,"mtime":1612635565776,"results":"70","hashOfConfig":"47"},{"size":479,"mtime":1612635208512,"results":"71","hashOfConfig":"47"},{"size":496,"mtime":1611186851562,"results":"72","hashOfConfig":"47"},{"size":5257,"mtime":1612624237512,"results":"73","hashOfConfig":"47"},{"size":7098,"mtime":1612944831648,"results":"74","hashOfConfig":"47"},{"size":7688,"mtime":1612944765198,"results":"75","hashOfConfig":"47"},{"size":6774,"mtime":1611428193841,"results":"76","hashOfConfig":"47"},{"size":304,"mtime":1611231455512,"results":"77","hashOfConfig":"47"},{"size":304,"mtime":1611231451894,"results":"78","hashOfConfig":"47"},{"size":2721,"mtime":1613049955934,"results":"79","hashOfConfig":"47"},{"size":1499,"mtime":1611781924143,"results":"80","hashOfConfig":"47"},{"size":697,"mtime":1611756831358,"results":"81","hashOfConfig":"47"},{"size":6337,"mtime":1612635904538,"results":"82","hashOfConfig":"47"},{"size":13461,"mtime":1612637195753,"results":"83","hashOfConfig":"47"},{"size":779,"mtime":1612944173152,"results":"84","hashOfConfig":"47"},{"size":292,"mtime":1611756405527,"results":"85","hashOfConfig":"47"},{"size":2753,"mtime":1612634983851,"results":"86","hashOfConfig":"47"},{"size":7758,"mtime":1612944420289,"results":"87","hashOfConfig":"47"},{"size":4733,"mtime":1612944480045,"results":"88","hashOfConfig":"47"},{"size":2868,"mtime":1612637177615,"results":"89","hashOfConfig":"47"},{"size":4947,"mtime":1612970605571,"results":"90","hashOfConfig":"47"},{"size":308,"mtime":1612944376386,"results":"91","hashOfConfig":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"12qyaxg",{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"94"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"94"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"94"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"94"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"94"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"94"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"94"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"94"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"94"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},"/Users/anascheriet/Documents/Projects/React/events_web_app/src/index.js",[],["193","194"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/App.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/reportWebVitals.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Sidebar.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/SideBar.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/NavBar.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Navbar.js",["195","196"],"import React from \"react\";\nimport { Menu, Dropdown } from 'antd';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { logoutAction } from \"../redux/actions/Users/logoutAction\"\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Icon } from \"semantic-ui-react\";\nconst Navbar = ({ setToggle }) => {\n\n  const dispatch = useDispatch();\n\n  const { token, user } = useSelector(state => state.userState);\n\n  const history = useHistory();\n\n\n  const isAdmin = token !== null && user?.role?.name !== \"Client\";\n\n\n\n  const logOut = () => {\n    dispatch(logoutAction());\n    history.push(\"/\");\n  }\n\n  const menu = (\n    <Menu style={{ backgroundColor: \"#14213d\" }}>\n      <Menu.Item >\n        <Link to=\"/EditProfile\">\n          <a target=\"_blank\" className=\"menuLink\" style={{ color: \"#fdde6c\" }} >\n            <Icon name=\"user\" style={{ color: \"#fdde6c\" }} />\n              Profile\n            </a>\n        </Link>\n      </Menu.Item>\n      {user !== null && user.role.name === \"Client\"\n        && <Menu.Item>\n          <Link to=\"/MyBookings\" style={{ color: \"#fdde6c\" }}>\n            <Icon name=\"ticket alternate\" style={{ color: \"#fdde6c\" }} />\n            My Bookings\n          </Link>\n        </Menu.Item>}\n      <Menu.Item >\n        <a onClick={logOut} className=\"menuLink\" target=\"_blank\" style={{ color: \"#fdde6c\" }} >\n          <Icon name=\"sign out\" style={{ color: \"#fdde6c\" }} />\n              Log out\n            </a>\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <div className=\"navbar\">\n      <div className=\"brand\">\n        {isAdmin && <div className=\"hamburger\" onClick={setToggle}>\n          <div />\n          <div />\n          <div />\n        </div>}\n\n        <div className=\"logo\">\n          <Link to=\"/Home\">\n            <a style={{ color: \"#fdde6c\", textTransform: \"lowercase\", paddingLeft: \"2rem\", fontSize: \"25px\" }} href=\"#!\">eventor</a>\n          </Link>\n\n        </div>\n      </div>\n\n      {user !== null &&\n        <Dropdown overlay={menu}>\n          <div className=\"left\">\n            <Icon name=\"arrow down\" style={{ color: \"#fdde6c\" }} />\n          </div>\n        </Dropdown>}\n\n      {user === null &&\n        <Link to=\"/\">\n          <div className=\"left\">\n            <i style={{ color: \"#fdde6c\" }} className=\"fas fa-arrow-right\" />\n          </div>\n        </Link>\n      }\n    </div>\n  );\n};\n\n\nexport default Navbar;\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Content.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/rootReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/userReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/api.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/login.js",["197","198","199","200"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/Login.js",["201","202","203"],"import { motion } from 'framer-motion';\nimport React, { useState } from 'react'\nimport \"./login.scss\"\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login } from '../../redux/actions/Users/loginAction';\nimport { Link, useHistory } from 'react-router-dom';\nimport { Icon } from 'semantic-ui-react';\nimport axios from 'axios';\nimport { forgotPasswordUrl } from '../../redux/api';\nimport { successToast } from '../../common/Notifications';\nimport { toast } from 'react-toastify';\n\nexport const Login = () => {\n\n  //Check if user is logged in\n  const { user } = useSelector(state => state.userState);\n\n  //need a dispatcher that executes the action !!!!!!!!!!:D\n  const dispatch = useDispatch();\n\n  const history = useHistory();\n\n  const initialValues = {\n    username: '',\n    password: ''\n  }\n\n  const ValidationSchema = new Yup.ObjectSchema({\n    username: Yup.string().email().required(),\n    password: Yup.string().required()\n    /* password: Yup.string().matches(\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{6,}$\") */\n  })\n\n  const submitHandler = (values) => {\n    dispatch(login(values, history));\n  }\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: ValidationSchema,\n    onSubmit: submitHandler\n  })\n\n  //Forgot Password \n\n  //Set up conditional rendering\n\n  const [forgotForm, setForgotForm] = useState(false);\n\n  const openForgotPass = () => {\n    setForgotForm(true);\n  }\n\n  const closeForgotPass = () => {\n    setForgotForm(false);\n  }\n\n  //Set up forgot password from\n  const forgotInitialValues = {\n    username: '',\n  }\n\n  const forgotValidationSchema = new Yup.ObjectSchema({\n    username: Yup.string().email().required(),\n  })\n\n\n\n  const forgotSubmitHandler = async (values) => {\n    try {\n      const resp = await axios.post(forgotPasswordUrl, values);\n      successToast(resp.data);\n      closeForgotPass();\n      forgotFormik.values.username = '';\n    } catch (error) {\n      toast.error(error.data);\n    }\n  }\n\n  const forgotFormik = useFormik({\n    initialValues: forgotInitialValues,\n    validationSchema: forgotValidationSchema,\n    onSubmit: forgotSubmitHandler\n  })\n\n  return (\n    <div className=\"all\">\n      <motion.div\n        className=\"logo-container\"\n        initial={{ scale: 0 }}\n        animate={{ scale: 1 }}\n        transition={{ ease: \"backOut\", duration: 1 }}>\n        <div className=\"name\">\n          <h2>eventor</h2>\n        </div>\n        <div className=\"description\">\n          {forgotForm ? <h2 style={{ fontSize: \"25px\" }}>Forgot Password</h2> : <h2>EVENT PLANNING.</h2>}\n          {user === null && forgotForm === false &&\n            <Link to=\"/Guest\" >\n              <button className=\"explore\">Explore Events &nbsp;<Icon size=\"large\" name=\"arrow alternate circle right\" /></button>\n            </Link>}\n        </div>\n      </motion.div>\n\n      {user === null ?\n        (\n          forgotForm ?\n            <div className=\"form\">\n              <form onSubmit={forgotFormik.handleSubmit}>\n                <label className=\"label\">Please Enter Your Email</label>\n                <br />\n                <input type=\"text\" name=\"username\" className=\"input\" {...forgotFormik.getFieldProps(\"username\")} />\n                <br />\n                {forgotFormik.touched.username && forgotFormik.errors.username &&\n                  <span style={{ color: \"red\" }}>{forgotFormik.errors.username}</span>}\n                <br />\n                <button type=\"submit\" className=\"submitBtn\" >Confirm</button>\n              </form>\n              <div className=\"links\">\n                <a onClick={closeForgotPass}>Cancel</a>\n              </div>\n\n            </div>\n\n            :\n            <div className=\"form\">\n              <form onSubmit={formik.handleSubmit}>\n                <label className=\"label\">EMAIL</label>\n                <br />\n                <input type=\"text\" name=\"username\" className=\"input\" {...formik.getFieldProps(\"username\")} />\n                <br />\n                {formik.touched.username && formik.errors.username &&\n                  <span style={{ color: \"red\" }}>{formik.errors.username}</span>}\n                <br />\n                <label className=\"label\">PASSWORD</label>\n                <br />\n                <input type=\"password\" name=\"password\" className=\"input\" {...formik.getFieldProps(\"password\")} />\n                <br />\n                {formik.touched.password && formik.errors.password &&\n                  <span style={{ color: \"red\" }}>{formik.errors.password}</span>}\n                <br />\n\n                <button type=\"submit\" className=\"submitBtn\" >Log In</button>\n\n              </form>\n              <div className=\"links\">\n                <Link to=\"/authentication/register\">\n                  <a>Create Account</a>\n                </Link>\n                <a onClick={openForgotPass}>Forgot Password?</a>\n              </div>\n            </div>) :\n        <div className=\"back\">\n          <h2>{`Welcome Back ${user.displayName} !`}</h2>\n          <Link to=\"/Redirect\">\n            <button>Get Back In</button>\n          </Link>\n        </div>}\n\n\n\n    </div>\n  );\n\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Exemple.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/logoutAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loadUserInfo.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loginAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventTypeReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/getTypesAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/eventTypeCUD.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/animations.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/CountryCityDATA.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/eventAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/Notifications.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/loadEventAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventsDashboard.js",["204","205","206"],"import React, { useEffect, useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { Button, Header, Icon, Divider } from 'semantic-ui-react'\nimport { Drawer } from 'antd';\nimport \"./eventsDashboard.scss\"\nimport { popup } from '../../../common/animations';\nimport { EventForm } from './EventForm';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { loadUserInfo } from '../../../redux/actions/Users/loadUserInfo';\nimport { EventEditForm } from './EventEditForm';\nimport { getAllEventTypes } from '../../../redux/actions/eventTypes/getTypesAction';\nimport { loadEventAction, unMountDrawer } from '../../../redux/actions/eventActions/loadEventAction';\nimport { formatDate, formatImageLink } from '../../../common/util';\n\nexport const EventsDashboard = () => {\n\n    //set up the dispatcher for actions (api calls)\n    const dispatch = useDispatch();\n\n    //get user Info on component load \n    useEffect(() => {\n        console.log(\"here\");\n        dispatch(loadUserInfo());\n        dispatch(getAllEventTypes());\n    }, [dispatch]);\n\n    //Getting the state\n    const { createdEvents } = useSelector(state => state.userState);\n\n    const { drawer } = useSelector(state => state.eventState);\n\n    //setUp Drawer for Create/Edit event form\n    const [visibleDrawer, setVisibleDrawer] = useState(false);\n\n    const showDrawer = () => {\n        setVisibleDrawer(true);\n    };\n    const closeDrawer = () => {\n        setVisibleDrawer(false);\n    };\n\n    //Set up conditional rendering of edit event form\n    const [editDrawer, setEditDrawer] = useState(false);\n\n    const showEDrawer = () => {\n        setEditDrawer(true);\n    };\n\n    const closeEDrawer = () => {\n        setEditDrawer(false);\n        dispatch(unMountDrawer());\n    };\n\n    const openEditEventForm = async (id) => {\n        showEDrawer();\n        dispatch(loadEventAction(id));\n    }\n\n    return (\n        <div>\n            <div className=\"header\">\n                <Header as='h2'>\n                    <Icon name='calendar' />\n                    <Header.Content>\n                        Events List\n      <Header.Subheader>Manage your events</Header.Subheader>\n                    </Header.Content>\n                </Header>\n                <Button onClick={showDrawer} color=\"green\"><Icon name=\"calendar\" /> Create new Event</Button>\n            </div>\n\n            <Divider />\n\n            {/* List of Events */}\n            <div className=\"container my-12 mx-auto px-4 md:px-12\" style={{ backgroundImage: \"\" }}>\n                <div className=\"flex flex-wrap -mx-1 lg:-mx-4\">\n                    {createdEvents.map((item) => {\n\n                        {/* Column_Start */ }\n                        return (\n                            <motion.div className=\"my-1 px-1 w-full md:w-1/2 lg:my-4 lg:px-4 lg:w-1/3\" variants={popup} initial=\"hidden\" animate=\"show\">\n                                {/* Article Start */}\n                                <article className=\"overflow-hidden rounded-lg shadow-lg\">\n                                    <img alt=\"Placeholder\" className=\"block h-auto w-full\" src={formatImageLink(item.imagePath)} style={{ width: \"400px\", height: \"200px\" }} />\n\n                                    <header className=\"flex items-center justify-between leading-tight p-2 md:p-4\">\n                                        <h1 className=\"text-lg\">\n                                            <p className=\"text-lg text-gray-800\">{item.eventName}</p>\n                                            <p className=\"text-lg text-gray-800\">${item.ticketPrice}</p>\n                                        </h1>\n                                        {formatDate(item.eventDate)}\n                                    </header>\n                                    <p className=\"ml-3 mr-3 mb-4 text-grey-dark text-sm\"> {item.description.substring(1, 160)}...</p>\n                                    <footer className=\"flex items-center justify-center leading-tight p-3 md:p-5\">\n                                        <button onClick={() => openEditEventForm(item.id)} className=\"bg-white text-blue-700 font-bold py-2 px-4\">Edit</button>&nbsp;\n          <button className=\"bg-white text-red-700 font-bold py-2 px-4\">Delete</button>\n                                    </footer>\n\n                                </article>\n                            </motion.div>)\n                        {/* Column End */ }\n                    })}\n                </div>\n            </div>\n\n            {/* Create form Drawer  */}\n            <Drawer\n                width={400}\n                placement=\"right\"\n                closable={false}\n                onClose={closeDrawer}\n                visible={visibleDrawer}\n            >\n                <EventForm\n                    closeDrawer={closeDrawer}\n                />\n            </Drawer>\n\n            {/* Edit form Drawer  */}\n            {drawer &&\n                <Drawer\n                    width={400}\n                    placement=\"right\"\n                    closable={false}\n                    onClose={closeEDrawer}\n                    visible={editDrawer}\n                >\n                    <EventEditForm closeEDrawer={closeEDrawer} />\n                </Drawer>\n            }\n        </div>\n\n    )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventEditForm.js",["207"],"import { useFormik } from 'formik';\nimport React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux';\nimport { myValidationSchema } from './EventForm';\nimport {\n    Form,\n    Input,\n    Select,\n    DatePicker,\n    InputNumber,\n    Upload,\n    Button as AntdButton\n} from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { Button } from 'semantic-ui-react';\nimport { eventsUrls, uploadImageUrl } from '../../../redux/api';\nimport axios from 'axios';\nimport { editToast } from '../../../common/Notifications';\n\nexport const EventEditForm = ({ closeEDrawer }) => {\n\n\n    //retrieve event types array from evTypes reducer\n    const { eventTypes } = useSelector(state => state.eventTypesState);\n    const { event } = useSelector(state => state.eventState);\n\n    const { countries } = useSelector(state => state.userState);\n\n    //Set up Event Object to object\n    const initialValues = {\n        eventName: event.eventName,\n        description: event.description,\n        country: event.country,\n        city: event.city,\n        availabletickets: event.availableTickets,\n        ticketprice: event.ticketPrice,\n        eventtypeid: event.eventType.id,\n        eventDate: null,\n        image: event.imagePath,\n    }\n\n    //Set up formik object to handle the form\n    const formik = useFormik({\n        validationSchema: myValidationSchema,\n        initialValues: initialValues,\n    })\n\n    //Image upload logic\n    const eventImageUpload = async (file) => {\n        let formData = new FormData();\n        formData.append('file', file);\n        let response = await axios.post(uploadImageUrl, formData);\n        //Assign response to image path\n        formik.values.image = response.data;\n    }\n\n\n    //Country / City Dropdown logic\n    const [Cities, setCities] = useState([]);\n\n    const submitHandler = async (ev) => {\n        console.log(ev);\n        await axios.patch(eventsUrls.edit(event.id), ev)\n        closeEDrawer();\n        editToast(\"The event Has been Updated! ✅\");\n    }\n\n\n    return (\n        <Form\n            className=\"eventForm\"\n            wrapperCol={{ span: 26 }}\n            layout=\"vertical\"\n            onFinish={() => submitHandler(formik.values)}\n        >\n            <Form.Item label=\"Event Name\">\n                <Input name='eventName' {...formik.getFieldProps('eventName')} />\n                {formik.touched.eventName && formik.errors.eventName &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventName}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Type\">\n                <Select\n                    name='eventtypeid'\n                    onChange={evtype => formik.setFieldValue('eventtypeid', evtype)}\n                    value={formik.values.eventtypeid}>\n                    {eventTypes.map((eType, index) => {\n                        return <Select.Option key={index} value={eType.id}>{eType.name}</Select.Option>\n                    })}\n                </Select>\n                {formik.touched.eventtypeid && formik.errors.eventtypeid &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventtypeid}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Country\">\n                <Select\n                    name='country'\n                    onChange={country => formik.setFieldValue('country', country)}\n                    onSelect={country => ((setCities(countries.filter(x => x.country === country)[0].cities), formik.setFieldValue('country', country)))}\n                    value={formik.values.country}>\n                    {countries.map((c, index) => {\n                        return <Select.Option key={index} value={c.country}>{c.country}</Select.Option>\n                    })}\n                </Select>\n                {formik.touched.country && formik.values.country === \"\" && console.log(formik.errors.country)}\n            </Form.Item>\n            <Form.Item label=\"City\">\n                <Select\n                    name='city'\n                    onChange={city => (formik.setFieldValue('city', city))}\n                    value={formik.values.city}>\n                    {Cities.map((c, index) => {\n                        return <Select.Option key={index} value={c}>{c}</Select.Option>\n                    })}\n\n                </Select>\n                {formik.touched.city && formik.errors.city &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.city}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Description\">\n                <Input.TextArea name='description' {...formik.getFieldProps('description')} />\n                {formik.touched.description && formik.errors.description &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.description}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Date\">\n\n                <DatePicker\n                    name='eventDate'\n                    onChange={date => (formik.setFieldValue('eventDate', date))}\n                    value={formik.values.eventDate}\n                    className=\"input\"\n                    showTime\n                    format=\"YYYY-MM-DD HH:mm:ss\" />\n                {formik.touched.eventDate && formik.errors.eventDate &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventDate}</pre>}\n\n            </Form.Item>\n            <Form.Item label=\"Ticket Price\">\n                <InputNumber\n                    name='ticketprice'\n                    onChange={price => formik.setFieldValue('ticketprice', price)}\n                    value={formik.values.ticketprice}\n                    style={{ width: \"25.2rem\" }} />\n                {formik.touched.ticketprice && formik.errors.ticketprice &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.ticketprice}</pre>}\n            </Form.Item>\n            <Form.Item label=\"No of available tickets\">\n                <Input\n                    name='availabletickets'\n                    /* onChange={tickets => formik.setFieldValue('availabletickets', tickets)} */\n                    {...formik.getFieldProps('availabletickets')}\n                    value={formik.values.availabletickets}\n                    style={{ width: \"25.2rem\" }} />\n                {formik.touched.availabletickets && formik.errors.availabletickets &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.availabletickets}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Image\">\n                <Upload name='image' action={eventImageUpload}>\n                    <AntdButton icon={<UploadOutlined />}>Click to Upload</AntdButton>\n                </Upload>\n            </Form.Item>\n            <Form.Item >\n                <Button color=\"blue\" disabled={Object.keys(formik.errors).length > 1} type=\"submit\">Update</Button>\n                <Button color=\"grey\" type=\"button\" onClick={closeEDrawer}>Cancel</Button>\n            </Form.Item>\n        </Form>\n    )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventForm.js",["208"],"import React, { useEffect, useState } from 'react'\nimport {\n    Form,\n    Input,\n    Select,\n    DatePicker,\n    InputNumber,\n    Upload,\n    Button as AntdButton\n} from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport \"./eventform.scss\"\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { Button } from 'semantic-ui-react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { createEventAction } from '../../../redux/actions/eventActions/eventAction'\nimport { successToast } from '../../../common/Notifications';\nimport axios from 'axios';\nimport { uploadImageUrl } from '../../../redux/api';\n\n//Set up object validation\nexport const myValidationSchema = new Yup.ObjectSchema({\n    eventName: Yup.string().required(),\n    description: Yup.string().required(),\n    country: Yup.string().required(),\n    city: Yup.string().required(),\n    availabletickets: Yup.number().required().positive().integer(),\n    ticketprice: Yup.number().required().positive(),\n    eventtypeid: Yup.number().required(),\n    eventDate: Yup.string().required()\n})\n\nexport const EventForm = ({ closeDrawer, }) => {\n\n\n    //set uo the dispatcher for different actions\n    const dispatch = useDispatch();\n\n    //retrieve event types array from evTypes reducer\n    const { eventTypes } = useSelector(state => state.eventTypesState);\n\n    //retrieve countries array\n    const { countries } = useSelector(state => state.userState);\n\n    //Country / City Dropdown logic\n    const [Cities, setCities] = useState([]);\n\n    //Set up Event Object\n    const initialValues = {\n        eventName: '',\n        description: '',\n        country: '',\n        city: '',\n        availabletickets: null,\n        ticketprice: null,\n        eventtypeid: null,\n        eventDate: '',\n        image: ''\n    }\n\n\n    //Set up formik object to handle the form\n    const formik = useFormik({\n        validationSchema: myValidationSchema,\n        initialValues: initialValues,\n    })\n\n    //get events so we can add to them\n    const { user } = useSelector(state => state.userState);\n    const { createdEvents } = user;\n\n\n    //Submit method\n    const submitHandler = (event) => {\n        dispatch(createEventAction(event));\n        createdEvents.push(event);\n        closeDrawer();\n        successToast(\"The event Has been Created!\");\n    }\n\n\n    //Image upload logic\n    const eventImageUpload = async (file) => {\n        let formData = new FormData();\n        formData.append('file', file);\n        let response = await axios.post(uploadImageUrl, formData);\n        //Assign response to image path\n        formik.values.image = response.data;\n    }\n\n\n\n\n\n    return (\n        <Form\n            className=\"eventForm\"\n            wrapperCol={{ span: 26 }}\n            layout=\"vertical\"\n            onFinish={() => submitHandler(formik.values)}\n        >\n            <Form.Item label=\"Event Name\">\n                <Input name='eventName' {...formik.getFieldProps('eventName')} />\n                {formik.touched.eventName && formik.errors.eventName &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventName}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Type\">\n                <Select\n                    name='eventtypeid'\n                    onChange={evtype => formik.setFieldValue('eventtypeid', evtype)}\n                    value={formik.values.eventtypeid}>\n                    {eventTypes?.map(eType => {\n                        return <Select.Option value={eType.id}>{eType.name}</Select.Option>\n                    })}\n                </Select>\n                {formik.touched.eventtypeid && formik.errors.eventtypeid &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventtypeid}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Country\">\n                <Select\n                    name='country'\n                    onChange={country => formik.setFieldValue('country', country)}\n                    onSelect={country => ((setCities(countries.filter(x => x.country === country)[0].cities), formik.setFieldValue('country', country)))}\n                    value={formik.values.country}>\n                    {countries.map(c => {\n                        return <Select.Option value={c.country}>{c.country}</Select.Option>\n                    })}\n                </Select>\n                {formik.touched.country && formik.values.country === \"\" && console.log(formik.errors.country)}\n            </Form.Item>\n            <Form.Item label=\"City\">\n                <Select\n                    name='city'\n                    onChange={city => (formik.setFieldValue('city', city))}\n                    value={formik.values.city}>\n                    {Cities.map((c, index) => {\n                        return <Select.Option key={index} value={c}>{c}</Select.Option>\n                    })}\n\n                </Select>\n                {formik.touched.city && formik.errors.city &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.city}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Description\">\n                <Input.TextArea name='description' {...formik.getFieldProps('description')} />\n                {formik.touched.description && formik.errors.description &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.description}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Date\">\n                <DatePicker\n                    name='eventDate'\n                    onChange={date => (formik.setFieldValue('eventDate', date))}\n                    value={formik.values.eventDate}\n                    className=\"input\"\n                    showTime\n                    format=\"YYYY-MM-DD HH:mm:ss\" />\n                {formik.touched.eventDate && formik.errors.eventDate &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventDate}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Ticket Price\">\n                <InputNumber\n                    name='ticketprice'\n                    onChange={price => formik.setFieldValue('ticketprice', price)}\n                    value={formik.values.ticketprice}\n                    style={{ width: \"25.2rem\" }} />\n                {formik.touched.ticketprice && formik.errors.ticketprice &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.ticketprice}</pre>}\n            </Form.Item>\n            <Form.Item label=\"No of available tickets\">\n                <Input\n                    name='availabletickets'\n                    /* onChange={tickets => formik.setFieldValue('availabletickets', tickets)} */\n                    {...formik.getFieldProps('availabletickets')}\n                    value={formik.values.availabletickets}\n                    style={{ width: \"25.2rem\" }} />\n                {formik.touched.availabletickets && formik.errors.availabletickets &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.availabletickets}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Image\">\n                <Upload name='image' action={eventImageUpload}>\n                    <AntdButton icon={<UploadOutlined />}>Click to Upload</AntdButton>\n                </Upload>\n            </Form.Item>\n            <Form.Item >\n                <Button color=\"green\" disabled={Object.keys(formik.errors).length !== 0} htmlType=\"submit\">Submit</Button>\n                <Button color=\"grey\" type=\"button\" onClick={closeDrawer}>Cancel</Button>\n            </Form.Item>\n        </Form>\n    )\n\n\n}\n\n\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/EventTypes.js",["209"],"import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Button, Header, Icon, Table, Divider } from 'semantic-ui-react'\nimport { Tag, Modal, Form, Input } from 'antd';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport axios from 'axios';\nimport { eventTypesUrls } from '../../../redux/api'\nimport { editToast, successToast } from '../../../common/Notifications';\nimport { getAllEventTypes } from '../../../redux/actions/eventTypes/getTypesAction';\nimport { createEventTypeAction } from '../../../redux/actions/eventTypes/eventTypeCUD'\n\nexport const EventTypes = () => {\n\n    const dispatch = useDispatch();\n    const { eventTypes } = useSelector(state => state.eventTypesState);\n    useEffect(() => {\n        dispatch(getAllEventTypes());\n    }, []);\n\n\n\n    const [editMode, setEditMode] = useState(false);\n\n    //Add event type modal\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    const openModalforAdd = () => {\n        setEditMode(false);\n        setIsModalVisible(true);\n        formik.values.name = \"\";\n        formik.values.id = 0;\n    };\n\n\n\n    const openModalforEdit = async (id) => {\n        const eventT = await axios.get(eventTypesUrls.details(id));\n        formik.values.name = eventT.data.name;\n        formik.values.id = eventT.data.id;\n        setEditMode(true);\n        setIsModalVisible(true);\n    };\n\n    //Edit Submit Handler\n    const editHandler = async () => {\n        await axios.put(eventTypesUrls.edit(formik.values.id), formik.values);\n        setIsModalVisible(false);\n        editToast(\"Event Type updated ! ✅\");\n    }\n\n\n    const closeModal = () => {\n        setIsModalVisible(false);\n    };\n\n    //Delete Modal\n    const [isDModalVisible, setIsDModalVisible] = useState(false);\n    const openDModal = () => {\n        setIsDModalVisible(true);\n    };\n\n    const closeDModal = () => {\n        setIsDModalVisible(false);\n    };\n\n    //Load event Type\n    const [getEvType, setGetEvType] = useState({})\n\n    const loadEType = async (id) => {\n        const eventT = await axios.get(eventTypesUrls.details(id));\n        setGetEvType({ ...getEvType, ...eventT.data });\n        console.log(getEvType);\n        openDModal();\n    }\n\n    const deleteETypeHandle = async (id) => {\n        await axios.delete(eventTypesUrls.delete(id)).catch(err => console.log(err));\n        eventTypes.filter(x => x.id !== id);\n        eventTypes.splice(eventTypes.findIndex(x => x.id === id), 1);\n        editToast(\"Event Type has been deleted ! 👍\");\n        closeDModal();\n    }\n\n\n\n    //Form handling \n\n    //Initial Values\n    const myInitialValues = { name: '' };\n\n    //Validation\n    const myValidationSchema = new Yup.object({\n        name: Yup.string().required(),\n    })\n\n    //Form handler\n    const formik = useFormik({\n        validationSchema: myValidationSchema,\n        initialValues: myInitialValues\n    })\n\n    //Create Submit eType handler\n    const submitHandler = (eType) => {\n        eType.id = eventTypes[eventTypes.length - 1].id + 1;\n        dispatch(createEventTypeAction(eType));\n        eventTypes.push(eType);\n        setIsModalVisible(false);\n        successToast(\"Event Type has been Added ! 👌\");\n    }\n\n\n    return (\n        <div>\n            <div className=\"header\">\n                <Header as='h2'>\n                    <Icon style={{ marginTop: \"0.7rem\" }} name='list' />\n                    <Header.Content>\n                        Event Types List\n                        <Header.Subheader>Manage event categories</Header.Subheader>\n                    </Header.Content>\n                </Header>\n                <Button onClick={openModalforAdd} color=\"green\"><Icon name=\"calendar plus\" /> Create new Event Type</Button>\n            </div>\n            <Divider />\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Category Id</Table.HeaderCell>\n                        <Table.HeaderCell>Category Name</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {eventTypes?.map(item => {\n                        return <Table.Row key={item.id}>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell>\n                                <Icon onClick={() => openModalforEdit(item.id)} name=\"edit\" title=\"Edit\" color=\"blue\" size=\"large\" />\n                                &nbsp;&nbsp;\n                                <Icon onClick={() => loadEType(item.id)} style={{ cursor: 'pointer' }} size=\"large\" title=\"Delete\" name=\"trash\" color=\"red\" /></Table.Cell>\n                        </Table.Row>\n                    })}\n                </Table.Body>\n            </Table>\n\n\n            {/* Add Event type modal  */}\n            <Modal title={editMode ? \"Update Event\" : \"Add an Event Type\"}\n                visible={isModalVisible}\n                onCancel={closeModal}\n                footer={[\n                    <Button onClick={closeModal}>\n                        Cancel\n                </Button>,\n                    <Button\n                        disabled={Object.keys(formik.errors).length !== 0}\n                        onClick={() => editMode ? editHandler() : submitHandler(formik.values)}\n                        color={editMode ? \"blue\" : \"green\"}>\n                        {editMode ? \"Update\" : \"Create\"}\n                    </Button>,\n                ]}>\n                <Form layout=\"vertical\">\n                    <Form.Item\n                        label=\"Type Name\">\n                        <Input name='name' {...formik.getFieldProps('name')} />\n                        {formik.touched.name && formik.errors.name && <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.name}</pre>}\n                    </Form.Item>\n                </Form>\n            </Modal>\n\n\n            {/* Delete evType Modal */}\n            <Modal title='Delete Event Type'\n                visible={isDModalVisible}\n                onCancel={closeDModal}\n                footer={[\n                    <Button onClick={closeDModal}>\n                        Cancel\n                </Button>,\n                    <Button\n                        onClick={() => deleteETypeHandle(getEvType.id)}\n                        color=\"red\">\n                        Delete\n                </Button>,\n                ]}>\n                <h3>Are you sure you want to delete Event Type: <Tag style={{ fontSize: \"20px\" }} color=\"red\">{getEvType.name}</Tag></h3>\n            </Modal>\n\n        </div>\n    )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/ClientReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/clientActions/getAllEventsAction.js",[],["210","211"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/EventsHome.js",["212","213"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/Event.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/util.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/EventDetail.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Admin/Dashboard.js",["214"],"import axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { Bar, HorizontalBar, Line, Pie, Polar } from 'react-chartjs-2';\nimport { useSelector } from 'react-redux';\nimport { Divider, Header, Icon } from 'semantic-ui-react';\nimport { statUrls } from '../../../redux/api';\nimport { AdminList } from '../../AdminList';\n\nexport const Dashboard = () => {\n\n\n  const [incomeData, setIncomeData] = useState({});\n  const [clientAgeData, setClientAgeData] = useState({});\n  const [clientNationalityData, setClientNationalityData] = useState({});\n  const [bookingMonthData, setBookingtMonthData] = useState({});\n  const [bookingEventTypeData, setBookingtEventTypeData] = useState({});\n\n\n  const { user } = useSelector(state => state.userState);\n\n  useEffect(() => {\n\n    const getBookingEventTypeData = async () => {\n      const resp = await axios.get(statUrls.byEventType);\n      setBookingtEventTypeData(resp?.data);\n    }\n\n    const getBookingMonthData = async () => {\n      const resp = await axios.get(statUrls.byBookingMonth);\n      setBookingtMonthData(resp?.data);\n    }\n\n    const getClientNationalityData = async () => {\n      const resp = await axios.get(statUrls.byClientNationality);\n      setClientNationalityData(resp?.data);\n    }\n\n    const getClientAgeData = async () => {\n      const resp = await axios.get(statUrls.byClientAge);\n      setClientAgeData(resp?.data);\n    }\n\n    const getIncome = async () => {\n      const response = await axios.get(statUrls.income);\n      setIncomeData(response?.data);\n    }\n\n    if (user?.role?.name !== \"Client\") {\n\n      getBookingEventTypeData();\n      getBookingMonthData();\n      getClientAgeData();\n      getIncome();\n      getClientNationalityData();\n    }\n\n\n  }, [])\n\n\n  const weekData = {\n    labels: incomeData.weekAvg > 0 ? [2, 3, 2, 8, 7, 8, 15] : [15, 13, 7, 12, 7, 8, 4],\n    datasets: [\n      {\n        backgroundColor: \"rgba(101, 116, 205, 0.1)\",\n        borderColor: \"rgba(101, 116, 205, 0.8)\",\n        borderWidth: 2,\n        data: incomeData.weekAvg > 0 ? [2, 3, 2, 8, 7, 8, 15] : [15, 13, 7, 10, 7, 8, 4],\n      },\n    ],\n  };\n\n  const monthData = {\n    labels: incomeData.monthAvg > 0 ? [2, 3, 2, 8, 7, 9, 15] : [15, 9, 7, 8, 2, 3, 2],\n    datasets: [\n      {\n        backgroundColor: \"rgba(246, 153, 63, 0.1)\",\n        borderColor: \"rgba(246, 153, 63, 0.8)\",\n        borderWidth: 2,\n        data: incomeData.monthAvg > 0 ? [2, 3, 2, 8, 7, 9, 15] : [15, 9, 7, 8, 2, 3, 2],\n      },\n    ],\n  };\n\n  const totalData = {\n    labels: incomeData.totalAvg > 0 ? [2, 4, 5, 8, 12, 9, 20] : [20, 9, 12, 8, 5, 4, 2],\n    datasets: [\n      {\n        backgroundColor: \"rgba(246, 109, 155, 0.1)\",\n        borderColor: \"rgba(246, 109, 155, 0.8)\",\n        borderWidth: 2,\n        data: incomeData.totalAvg > 0 ? [2, 4, 5, 8, 12, 9, 20] : [20, 9, 12, 8, 5, 4, 2],\n      },\n    ],\n  };\n\n  const chartOptions = {\n    maintainAspectRatio: false,\n    legend: {\n      display: false,\n    },\n    tooltips: {\n      enabled: false,\n    },\n    elements: {\n      point: {\n        radius: 0\n      },\n    },\n    scales: {\n      xAxes: [{\n        gridLines: false,\n        scaleLabel: false,\n        ticks: {\n          display: false\n        }\n      }],\n      yAxes: [{\n        gridLines: false,\n        scaleLabel: false,\n        ticks: {\n          display: false,\n          suggestedMin: 0,\n          suggestedMax: 10\n        }\n      }]\n    }\n  };\n\n  const byClientAgeData = {\n    labels: ['18 to 29', '30 to 39', '40 to 65', 'Above 66'],\n    datasets: [\n      {\n        data: [clientAgeData[\"18 to 29\"], clientAgeData[\"30 to 39\"], clientAgeData[\"40 to 65\"], clientAgeData[\"Above 66\"]],\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  }\n\n  const byClientNationalitydata = {\n    labels: Object.keys(clientNationalityData),\n    datasets: [\n      {\n        label: '# of Clients',\n        data: Object.values(clientNationalityData),\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)',\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  }\n\n\n  const byBookingMonthData = {\n    labels: Object.keys(bookingMonthData),\n    datasets: [\n      {\n        label: '# of Bookings',\n        data: Object.values(bookingMonthData),\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.5)',\n          'rgba(54, 162, 235, 0.5)',\n          'rgba(255, 206, 86, 0.5)',\n          'rgba(75, 192, 192, 0.5)',\n          'rgba(153, 102, 255, 0.5)',\n          'rgba(255, 159, 64, 0.5)',\n          'rgb(255, 99, 132)',\n          'rgb(54, 162, 235)',\n          'rgb(75, 192, 192)',\n          'rgba(225, 224, 0, 1)',\n          'rgba(135, 10, 24, 0.5)',\n          'rgba(154, 262, 125, 103.5)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  }\n\n\n\n  const byEventTypeData = {\n    labels: Object.keys(bookingEventTypeData),\n    datasets: [\n      {\n        label: \"# of bookings\",\n        data: Object.values(bookingEventTypeData),\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.2)',\n          'rgba(54, 162, 235, 0.2)',\n          'rgba(255, 206, 86, 0.2)',\n          'rgba(75, 192, 192, 0.2)',\n          'rgba(153, 102, 255, 0.2)',\n          'rgba(255, 159, 64, 0.2)',\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          'rgba(255, 159, 64, 1)',\n        ],\n        borderWidth: 1,\n      },\n    ],\n  }\n\n  const byEventTypeOptions = {\n    scales: {\n      yAxes: [\n        {\n          ticks: {\n            beginAtZero: true,\n          },\n        },\n      ],\n    },\n  }\n\n\n\n  //Admins Data\n  return (\n\n    <div>\n      <div className=\"header\">\n        <Header as='h2'>\n          <Icon name='chart line' />\n          <Header.Content>\n            Analytics Dashboard\n      <Header.Subheader>Check Your Events Performance </Header.Subheader>\n          </Header.Content>\n        </Header>\n      </div>\n      <Divider />\n      <div className=\"flex items-center justify-center px-5 py-5\">\n        <div className=\"w-full max-w-8xl\">\n          <div className=\"-mx-2 md:flex\">\n            <div className=\"w-full md:w-1/3 px-5\">\n              <div className=\"rounded-lg shadow-sm mb-4\">\n                <div className=\"rounded-lg bg-white shadow-lg md:shadow-xl relative overflow-hidden\">\n                  <div className=\"px-3 pt-8 pb-10 text-center relative z-10\">\n                    <h4 className=\"text-sm uppercase text-gray-500 leading-tight\">Weekly Income</h4>\n                    <h3 className=\"text-3xl text-gray-700 font-semibold leading-tight my-3\">${incomeData.weekIncome}</h3>\n                    <p className={`text-xs $ text-${incomeData.weekAvg < 0 ? \"red\" : \"green\"}-500 leading-tight`}>{incomeData.weekAvg < 0 ? \"▼ \" : \"▲ \"}{incomeData.weekAvg}%</p>\n                  </div>\n                  <div className=\"absolute bottom-0 inset-x-0\">\n                    <Line data={weekData} options={chartOptions} height={55} />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"w-full md:w-1/3 px-2\">\n              <div className=\"rounded-lg shadow-sm mb-4\">\n                <div className=\"rounded-lg bg-white shadow-lg md:shadow-xl relative overflow-hidden\">\n                  <div className=\"px-3 pt-8 pb-10 text-center relative z-10\">\n                    <h4 className=\"text-sm uppercase text-gray-500 leading-tight\">Monthly Income</h4>\n                    <h3 className=\"text-3xl text-gray-700 font-semibold leading-tight my-3\">${incomeData.monthIncome}</h3>\n                    <p className={`text-xs $ text-${incomeData.monthAvg < 0 ? \"red\" : \"green\"}-500 leading-tight`}>{incomeData.monthAvg < 0 ? \"▼ \" : \"▲ \"}{incomeData.monthAvg}%</p>\n                  </div>\n                  <div className=\"absolute bottom-0 inset-x-0\">\n                    <Line data={monthData} options={chartOptions} height={55} />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"w-full md:w-1/3 px-2\">\n              <div className=\"rounded-lg shadow-sm mb-4\">\n                <div className=\"rounded-lg bg-white shadow-lg md:shadow-xl relative overflow-hidden\">\n                  <div className=\"px-3 pt-8 pb-10 text-center relative z-10\">\n                    <h4 className=\"text-sm uppercase text-gray-500 leading-tight\">Total Income</h4>\n                    <h3 className=\"text-3xl text-gray-700 font-semibold leading-tight my-3\">${incomeData.totalIncome}</h3>\n                    <p className={`text-xs $ text-${incomeData.totalAvg < 0 ? \"red\" : \"green\"}-500 leading-tight`}>{incomeData.totalAvg < 0 ? \"▼ \" : \"▲ \"}{incomeData.totalAvg}%</p>\n                  </div>\n                  <div className=\"absolute bottom-0 inset-x-0\">\n                    <Line data={totalData} options={chartOptions} height={55} />\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container my-0 mx-auto px-4 md:px-12\">\n        <div className=\"flex flex-wrap -mx-1 lg:-mx-7\">\n\n\n          <div className=\"my-1 px-1 w-full md:w-1/2 lg:my-6 lg:px-9 lg:w-1/2\">\n\n\n            <article className=\"overflow-hidden rounded-lg shadow-lg\">\n\n\n              <header className=\"flex items-center justify-between leading-tight p-2 md:p-4\">\n\n                <p className=\"text-grey-darker text-lg text-center\">\n                  Bookings Classed by Customer Age\n             </p>\n              </header>\n\n              <Pie data={byClientAgeData} />\n\n\n              <footer className=\"flex items-center justify-between leading-none p-2 md:p-4\">\n              </footer>\n\n            </article>\n\n\n          </div>\n          <div className=\"my-1 px-1 w-full md:w-1/2 lg:my-6 lg:px-9 lg:w-1/2\">\n\n\n            <article className=\"overflow-hidden rounded-lg shadow-lg\">\n\n\n              <header className=\"flex items-center justify-between leading-tight p-2 md:p-4\">\n\n                <p className=\"text-grey-darker text-lg text-center\">\n                  Bookings Classed by Customer Country\n                         </p>\n              </header>\n\n              <Bar data={byClientNationalitydata} />\n\n\n              <footer className=\"flex items-center justify-between leading-none p-2 md:p-4\">\n              </footer>\n\n            </article>\n\n\n          </div>\n\n\n\n\n        </div>\n      </div>\n\n      <div className=\"container my-0 mx-auto px-4 md:px-12\">\n        <div className=\"flex flex-wrap -mx-1 lg:-mx-7\">\n\n\n          <div className=\"my-1 px-1 w-full md:w-1/2 lg:my-6 lg:px-9 lg:w-1/2\">\n\n\n            <article className=\"overflow-hidden rounded-lg shadow-lg\">\n\n\n              <header className=\"flex items-center justify-between leading-tight p-2 md:p-4\">\n\n                <p className=\"text-grey-darker text-lg text-center\">\n                  Bookings Classed by Month\n             </p>\n              </header>\n\n              <Polar data={byBookingMonthData} />\n\n\n              <footer className=\"flex items-center justify-between leading-none p-2 md:p-4\">\n              </footer>\n\n            </article>\n\n\n          </div>\n          <div className=\"my-1 px-1 w-full md:w-1/2 lg:my-6 lg:px-9 lg:w-1/2\">\n\n\n            <article className=\"overflow-hidden rounded-lg shadow-lg\">\n\n\n              <header className=\"flex items-center justify-between leading-tight p-2 md:p-4\">\n\n                <p className=\"text-grey-darker text-lg text-center\">\n                  Bookings Classed by Event Type\n                         </p>\n              </header>\n\n              <HorizontalBar data={byEventTypeData} options={byEventTypeOptions} />\n\n              <footer className=\"flex items-center justify-between leading-none p-2 md:p-4\">\n              </footer>\n\n            </article>\n\n\n          </div>\n\n\n\n\n        </div>\n      </div>\n\n      {/* Show Admins list to superAdmin */}\n      {user.role.name === \"SuperAdmin\" &&\n\n        <div className=\"container my-0 mx-auto px-4 md:px-12\">\n          <div className=\"flex flex-wrap -mx-7 lg:-mx-7\">\n\n            <div className=\"min-w-full my-1 px-1 md:w-1/2 lg:my-4 lg:px-4 lg:w-1/3\">\n\n              <article className=\"overflow-hidden rounded-lg shadow-lg\">\n\n\n\n                <header className=\"flex items-center justify-between leading-tight p-2 md:p-4\">\n                  <h1 className=\"text-lg\">\n                    <p className=\"text-grey-darker text-bg text-center\">\n                      Admins List\n             </p>\n                  </h1>\n\n                </header>\n                <AdminList />\n              </article>\n            </div>\n\n          </div>\n        </div>\n      }\n\n    </div>\n\n  )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/Redirect.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/ClientContent.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/ResetPassword.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/AdminList.js",["215"],"import React, { useEffect, useState } from 'react'\nimport { Button, Icon, Table } from 'semantic-ui-react'\nimport { Form, Input, Modal, Select, Tag } from 'antd';\nimport axios from 'axios';\nimport { adminDataUrl, authUrls, lockUnlockAdminUrl } from '../redux/api';\nimport { successToast } from '../common/Notifications';\nimport { toast } from 'react-toastify';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useSelector } from 'react-redux';\n\nexport const AdminList = () => {\n\n    const [adminData, setAdminData] = useState([]);\n\n    const getAdminData = async () => {\n        const response = await axios.get(adminDataUrl);\n        setAdminData(response.data);\n    }\n\n\n\n    const lockUnlockAdmin = (id) => {\n        axios.get(lockUnlockAdminUrl(id)).then((resp) => {\n            successToast(resp.data);\n            getAdminData();\n        }, (error) => {\n            console.log(error);\n            toast.error(error.data);\n        })\n    }\n\n    //Set up admin add Modal\n\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    const openModal = () => {\n        setIsModalVisible(true);\n    };\n\n    const closeModal = () => {\n        setIsModalVisible(false);\n        clearValues();\n    };\n\n    //Admin Attributes\n    const myInitialValues = {\n        displayName: \"\",\n        email: \"\",\n        gender: \"\",\n        country: \"\",\n        age: null\n    }\n\n    //clear form Attributes\n    const clearValues = () => {\n        formik.values.email = \"\";\n        formik.values.country = \"\";\n        formik.values.gender = \"\";\n        formik.values.displayName = \"\";\n        formik.values.age = null;\n    }\n\n    //Set up object validation\n    const myValidationSchema = new Yup.ObjectSchema({\n        displayName: Yup.string().required(),\n        email: Yup.string().email().required(),\n        country: Yup.string().required(),\n        gender: Yup.string().required(),\n        age: Yup.number().required()\n    })\n\n    //Submit method\n    const addAdminHandler = async (values) => {\n        try {\n            const response = await axios.post(authUrls.register, values);\n            if (response) {\n                successToast(response.data);\n                closeModal();\n                getAdminData();\n            }\n        } catch (error) {\n            toast.error(error.data);\n        }\n\n    }\n\n    //Set up formik object to handle the form\n    const formik = useFormik({\n        validationSchema: myValidationSchema,\n        initialValues: myInitialValues,\n\n    })\n\n    useEffect(() => {\n        getAdminData();\n    }, [])\n\n\n    //get  countries\n    const { countries } = useSelector(state => state.userState);\n\n    return (\n        <div style={{ padding: \"0.7rem\" }}>\n            <a onClick={openModal} href=\"#\" className=\"border-2 border-indigo-700 rounded-full float-right font-bold text-indigo-700 px-4 py-3 transition duration-300 ease-in-out hover:bg-indigo-700 hover:text-white mr-6\">\n                New Admin</a>\n            <br />\n            <br />\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Id</Table.HeaderCell>\n                        <Table.HeaderCell>Name</Table.HeaderCell>\n                        <Table.HeaderCell>Email</Table.HeaderCell>\n                        <Table.HeaderCell>Age</Table.HeaderCell>\n                        <Table.HeaderCell>Country</Table.HeaderCell>\n                        <Table.HeaderCell>Total revenue</Table.HeaderCell>\n                        <Table.HeaderCell>Lock/Unlock account</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {adminData?.map(item => {\n                        return <Table.Row key={item.id}>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.displayName}</Table.Cell>\n                            <Table.Cell>{item.email}</Table.Cell>\n                            <Table.Cell>{item.age}</Table.Cell>\n                            <Table.Cell>{item.country}</Table.Cell>\n                            <Table.Cell> <Tag color=\"volcano\">${item.totalRevenue}</Tag> </Table.Cell>\n                            <Table.Cell> <Icon onClick={() => lockUnlockAdmin(item.id)} color={`${item.isAccNonLocked ? \"green\" : \"red\"}`} name={`${item.isAccNonLocked ? \"lock open\" : \"lock\"}`} /></Table.Cell>\n                        </Table.Row>\n                    })}\n                </Table.Body>\n            </Table>\n\n            {/* Add Admin modal  */}\n            <Modal title=\"Add an Admin\"\n                visible={isModalVisible}\n                onCancel={closeModal}\n                footer={[\n                    <Button onClick={closeModal}>\n                        Cancel\n                </Button>,\n                    <Button\n                        disabled={Object.keys(formik.errors).length !== 0}\n                        onClick={() => addAdminHandler(formik.values)}\n                        color=\"purple\">\n                        Add\n                    </Button>,\n                ]}>\n                <Form layout=\"vertical\">\n                    <Form.Item label=\"Email\">\n                        <Input name='email' {...formik.getFieldProps('email')} />\n                        {formik.touched.email && formik.errors.email &&\n                            <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.email}</pre>}\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Display Name\">\n                        <Input name='displayName' {...formik.getFieldProps('displayName')} />\n                        {formik.touched.displayName && formik.errors.displayName &&\n                            <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.displayName}</pre>}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Age\">\n                        <Input name='age' {...formik.getFieldProps('age')} />\n                        {formik.touched.age && formik.errors.age &&\n                            <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.age}</pre>}\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Gender\">\n                        <Select name='gender'\n                            onChange={gender => formik.setFieldValue('gender', gender)}\n                            value={formik.values.gender} >\n                            <Select.Option value=\"Male\">Male</Select.Option>\n                            <Select.Option value=\"Female\">Female</Select.Option>\n                            <Select.Option value=\"Other\">Other</Select.Option>\n                        </Select>\n                        {formik.touched.gender && formik.errors.gender &&\n                            <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.gender}</pre>}\n                    </Form.Item>\n                    <Form.Item\n                        label=\"Country\">\n                        <Select\n                            name='country'\n                            onChange={country => formik.setFieldValue('country', country)}\n                            value={formik.values.country}>\n                            {countries.map(c => {\n                                return <Select.Option key={c.country} value={c.country}>{c.country}</Select.Option>\n                            })}\n                        </Select>\n                        {formik.touched.country && formik.values.country === \"\" && console.log(formik.errors.country)}\n                    </Form.Item>\n                </Form>\n            </Modal>\n        </div>\n\n\n\n    )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/Register.js",["216","217"],"import axios from 'axios';\nimport React, { useEffect, useState } from 'react'\nimport \"./register.scss\"\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { authUrls } from '../../redux/api';\nimport { successToast } from '../../common/Notifications';\nimport { toast } from 'react-toastify';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nexport const Register = () => {\n\n\n    const history = useHistory();\n\n    //Formik Set Up\n\n    //Admin Attributes\n    const myInitialValues = {\n        displayName: \"\",\n        email: \"\",\n        gender: \"\",\n        country: \"\",\n        password: \"\",\n        age: 0\n    }\n\n    //Set up object validation\n    const myValidationSchema = new Yup.ObjectSchema({\n        displayName: Yup.string().required(),\n        email: Yup.string().email().required(),\n        country: Yup.string().required(),\n        gender: Yup.string().required(),\n        age: Yup.number().required(),\n        password: Yup.string().required()\n    })\n\n    //Submit method\n    const registerHandler = async (values) => {\n        console.log(values);\n        try {\n            const response = await axios.post(authUrls.register, values);\n            if (response) {\n                successToast(response.data);\n                history.push(\"/\");\n            }\n        } catch (error) {\n            toast.error(error.data);\n        }\n    }\n\n    //Set up formik object to handle the form\n    const formik = useFormik({\n        validationSchema: myValidationSchema,\n        initialValues: myInitialValues,\n    })\n\n\n    const { countries } = useSelector(state => state.userState)\n    return (\n        <div className=\"register\">\n            <div className=\"title\">\n                <h2>Register</h2>\n            </div>\n            <div className=\"form md:mt-10\">\n                <div className=\"flex py-0 px-9 mt-3\">\n\n                    <div className=\"flex-1 flex-col m-6 mt-28\">\n\n                        <label className=\"reglabel\">Email</label>\n\n                        <input className=\"reginput\" type=\"text\" name='email' value={formik.values.email} {...formik.getFieldProps(\"email\")} />\n\n                        {formik.touched.email && formik.errors.email &&\n                            <pre className=\"error\">{formik.errors.email}</pre>}\n                        <label className=\"reglabel\">Age</label>\n                        <input className=\"reginput\" type=\"number\" name='age' value={formik.values.age} {...formik.getFieldProps('age')} />\n                        {formik.touched.age && formik.errors.age &&\n                            <pre className=\"error\">{formik.errors.age}</pre>}\n\n                        <label className=\"reglabel\">Country</label>\n                        <select className=\"reginput\" type=\"text\" {...formik.getFieldProps(\"country\")} >\n                            <option value=\"\" disabled></option>\n                            {countries.map(c => {\n                                return <option key={c.country} value={c.country}>{c.country}</option>\n                            })}\n                        </select>\n\n\n                        <button className=\"regBtn\" onClick={() => registerHandler(formik.values)}>\n                            Create Account\n                        </button>\n                    </div>\n                    <div className=\"flex-1 flex-col m-6 mt-28\">\n\n                        <label className=\"reglabel\">Display Name</label>\n\n                        <input className=\"reginput\" type=\"text\" name='displayName' value={formik.values.displayName} {...formik.getFieldProps(\"displayName\")} />\n\n                        {formik.touched.displayName && formik.errors.displayName &&\n                            <pre className=\"error\">{formik.errors.displayName}</pre>}\n\n                        <label className=\"reglabel\">Password</label>\n\n                        <input className=\"reginput\" type=\"password\" name='password' value={formik.values.password} {...formik.getFieldProps('password')} />\n                        {formik.touched.password && formik.errors.password &&\n                            <span className=\"error\">{formik.errors.password}</span>}\n\n                        <label className=\"reglabel\">Gender</label>\n                        <select className=\"reginput\" type=\"text\" {...formik.getFieldProps(\"gender\")} >\n                            <option value=\"\" disabled></option>\n                            <option value=\"Male\">Male</option>\n                            <option value=\"Female\">Female</option>\n                            <option value=\"Other\">Other</option>\n                        </select>\n                    </div>\n\n                </div>\n            </div>\n        </div >)\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Client/ClientBookings.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/EditProfile.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loadCountries.js",[],{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","severity":1,"message":"223","line":29,"column":11,"nodeType":"224","endLine":29,"endColumn":81},{"ruleId":"222","severity":1,"message":"223","line":43,"column":9,"nodeType":"224","endLine":43,"endColumn":96},{"ruleId":"225","severity":1,"message":"226","line":2,"column":10,"nodeType":"227","messageId":"228","endLine":2,"endColumn":14},{"ruleId":"225","severity":1,"message":"229","line":2,"column":16,"nodeType":"227","messageId":"228","endLine":2,"endColumn":21},{"ruleId":"225","severity":1,"message":"230","line":2,"column":23,"nodeType":"227","messageId":"228","endLine":2,"endColumn":29},{"ruleId":"225","severity":1,"message":"231","line":2,"column":31,"nodeType":"227","messageId":"228","endLine":2,"endColumn":39},{"ruleId":"222","severity":1,"message":"223","line":122,"column":17,"nodeType":"224","endLine":122,"endColumn":46},{"ruleId":"222","severity":1,"message":"223","line":150,"column":19,"nodeType":"224","endLine":150,"endColumn":22},{"ruleId":"222","severity":1,"message":"223","line":152,"column":17,"nodeType":"224","endLine":152,"endColumn":45},{"ruleId":"232","severity":1,"message":"233","line":79,"column":25,"nodeType":"234","messageId":"235","endLine":79,"endColumn":46},{"ruleId":"232","severity":1,"message":"233","line":101,"column":25,"nodeType":"234","messageId":"235","endLine":101,"endColumn":44},{"ruleId":"236","severity":1,"message":"237","line":101,"column":25,"nodeType":"234","messageId":"238","endLine":101,"endColumn":44},{"ruleId":"225","severity":1,"message":"239","line":2,"column":17,"nodeType":"227","messageId":"228","endLine":2,"endColumn":26},{"ruleId":"225","severity":1,"message":"239","line":1,"column":17,"nodeType":"227","messageId":"228","endLine":1,"endColumn":26},{"ruleId":"240","severity":1,"message":"241","line":19,"column":8,"nodeType":"242","endLine":19,"endColumn":10,"suggestions":"243"},{"ruleId":"218","replacedBy":"244"},{"ruleId":"220","replacedBy":"245"},{"ruleId":"246","severity":1,"message":"247","line":50,"column":53,"nodeType":"248","messageId":"249","endLine":50,"endColumn":55},{"ruleId":"250","severity":1,"message":"251","line":51,"column":43,"nodeType":"252","messageId":"253","endLine":51,"endColumn":45},{"ruleId":"240","severity":1,"message":"254","line":58,"column":6,"nodeType":"242","endLine":58,"endColumn":8,"suggestions":"255"},{"ruleId":"222","severity":1,"message":"256","line":105,"column":13,"nodeType":"224","endLine":105,"endColumn":223},{"ruleId":"225","severity":1,"message":"239","line":2,"column":17,"nodeType":"227","messageId":"228","endLine":2,"endColumn":26},{"ruleId":"225","severity":1,"message":"257","line":2,"column":28,"nodeType":"227","messageId":"228","endLine":2,"endColumn":36},"no-native-reassign",["258"],"no-negated-in-lhs",["259"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-unused-vars","'Form' is defined but never used.","Identifier","unusedVar","'Input' is defined but never used.","'Button' is defined but never used.","'Checkbox' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unreachable","Unreachable code.","unreachableCode","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["260"],["258"],["259"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'user?.role?.name'. Either include it or remove the dependency array.",["261"],"The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"262","fix":"263"},{"desc":"264","fix":"265"},"Update the dependencies array to be: [dispatch]",{"range":"266","text":"267"},"Update the dependencies array to be: [user?.role?.name]",{"range":"268","text":"269"},[826,828],"[dispatch]",[1743,1745],"[user?.role?.name]"]