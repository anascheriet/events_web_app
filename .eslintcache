[{"/Users/anascheriet/Documents/Projects/React/events_web_app/src/index.js":"1","/Users/anascheriet/Documents/Projects/React/events_web_app/src/App.js":"2","/Users/anascheriet/Documents/Projects/React/events_web_app/src/reportWebVitals.js":"3","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Sidebar.js":"4","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/SideBar.js":"5","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/NavBar.js":"6","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Navbar.js":"7","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Content.js":"8","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/rootReducer.js":"9","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/userReducer.js":"10","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/api.js":"11","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/login.js":"12","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/Login.js":"13","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/dashboard.js":"14","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Dashboard.js":"15","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/EventsDashboard.js":"16","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Exemple.js":"17","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/EventForm.js":"18","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/logoutAction.js":"19","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loadUserInfo.js":"20","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loginAction.js":"21","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventTypeReducer.js":"22","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/getTypesAction.js":"23","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/EventTypes.js":"24","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/eventTypeCUD.js":"25","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/animations.js":"26","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/CountryCityDATA.js":"27","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/EventEditForm.js":"28","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/eventAction.js":"29","/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/Notifications.js":"30","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/loadEventAction.js":"31","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventReducer.js":"32","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/HHHHH.js":"33"},{"size":1724,"mtime":1611175507291,"results":"34","hashOfConfig":"35"},{"size":1988,"mtime":1611181591293,"results":"36","hashOfConfig":"35"},{"size":362,"mtime":1610046698593,"results":"37","hashOfConfig":"35"},{"size":958,"mtime":1611181400365,"results":"38","hashOfConfig":"35"},{"size":967,"mtime":1610059435350,"results":"39","hashOfConfig":"35"},{"size":484,"mtime":1610059441419,"results":"40","hashOfConfig":"35"},{"size":1886,"mtime":1611180800014,"results":"41","hashOfConfig":"35"},{"size":256,"mtime":1611178182555,"results":"42","hashOfConfig":"35"},{"size":351,"mtime":1611164042719,"results":"43","hashOfConfig":"35"},{"size":886,"mtime":1611181197971,"results":"44","hashOfConfig":"35"},{"size":1536,"mtime":1611005121476,"results":"45","hashOfConfig":"35"},{"size":191,"mtime":1610225178281,"results":"46","hashOfConfig":"35"},{"size":2375,"mtime":1611187036129,"results":"47","hashOfConfig":"35"},{"size":325,"mtime":1610385636815,"results":"48","hashOfConfig":"35"},{"size":186,"mtime":1610463293214,"results":"49","hashOfConfig":"35"},{"size":7500,"mtime":1611188341825,"results":"50","hashOfConfig":"35"},{"size":3120,"mtime":1610492708884,"results":"51","hashOfConfig":"35"},{"size":8055,"mtime":1611181561029,"results":"52","hashOfConfig":"35"},{"size":230,"mtime":1611172963777,"results":"53","hashOfConfig":"35"},{"size":358,"mtime":1611181242922,"results":"54","hashOfConfig":"35"},{"size":373,"mtime":1610712910187,"results":"55","hashOfConfig":"35"},{"size":341,"mtime":1611161273030,"results":"56","hashOfConfig":"35"},{"size":306,"mtime":1610649879875,"results":"57","hashOfConfig":"35"},{"size":6640,"mtime":1611181555854,"results":"58","hashOfConfig":"35"},{"size":201,"mtime":1610652907595,"results":"59","hashOfConfig":"35"},{"size":553,"mtime":1610996444592,"results":"60","hashOfConfig":"35"},{"size":1032381,"mtime":1610998461066,"results":"61","hashOfConfig":"35"},{"size":7459,"mtime":1611181195330,"results":"62","hashOfConfig":"35"},{"size":173,"mtime":1611161749133,"results":"63","hashOfConfig":"35"},{"size":597,"mtime":1611179050768,"results":"64","hashOfConfig":"35"},{"size":479,"mtime":1611164041248,"results":"65","hashOfConfig":"35"},{"size":496,"mtime":1611186851562,"results":"66","hashOfConfig":"35"},{"size":127,"mtime":1611172829784,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"12qyaxg",{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"70"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"70"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},"/Users/anascheriet/Documents/Projects/React/events_web_app/src/index.js",[],["140","141"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/App.js",["142","143"],"import React, { useEffect, useState } from \"react\";\nimport \"simplebar\"; // or \"import SimpleBar from 'simplebar';\" if you want to use it manually.\nimport \"simplebar/dist/simplebar.css\";\nimport Navbar from \"./Layout/Navbar\";\nimport Sidebar from \"./Layout/Sidebar\";\nimport Content from \"./Layout/Content\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./styles.scss\";\nimport { EventsDashboard } from \"./Components/events/EventsDashboard\"\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Login } from \"./Components/auth/Login\";\nimport { ToastContainer } from \"react-toastify\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { EventTypes } from \"./Components/events/EventTypes\";\n\nfunction App() {\n  const [toggleBtn, setToggleBtn] = useState(true);\n  const toggle = () => setToggleBtn(val => !val);\n\n  const { token, user } = useSelector(state => state.userState);\n  const dispatch = useDispatch();\n\n  const isAdmin = token !== null && user?.role?.name !== \"Client\";\n\n  return (\n    <div >\n      <Router>\n        <ToastContainer />\n        {token === null ?\n          <Route exact path=\"/\" component={Login} />\n          :\n          <>\n            <Navbar setToggle={toggle} />\n            {token !== null && isAdmin ? <>\n              <Sidebar toggleBtn={toggleBtn} />\n              <Content toggleBtn={toggleBtn}>\n                <Switch>\n                  <Route exact path=\"/Events\" component={EventsDashboard} />\n                  <Route exact path=\"/EventTypes\" component={EventTypes} />\n                </Switch>\n              </Content></>\n              :\n              ''}\n\n          </>\n        }\n\n\n\n        {/*     <Navbar setToggle={toggle} toggleBtn={toggleBtn} />\n        <Sidebar setToggle={toggle} toggleBtn={toggleBtn} />\n        <Content toggleBtn={toggleBtn}>\n\n          {user.role.name === \"SuperAdmin\" ? <EventsDashboard /> : <HHHHH />}\n        </Content> */}\n      </Router>\n\n    </div>\n  );\n}\n\nexport default App;","/Users/anascheriet/Documents/Projects/React/events_web_app/src/reportWebVitals.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Sidebar.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/SideBar.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/NavBar.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Navbar.js",["144","145","146"],"import React, { useEffect } from \"react\";\nimport { Menu, Dropdown } from 'antd';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { logoutAction } from \"../redux/actions/Users/logoutAction\"\nimport { loadUserInfo } from \"../redux/actions/Users/loadUserInfo\"\nimport { useHistory } from \"react-router-dom\";\nconst Navbar = ({ setToggle }) => {\n\n  const dispatch = useDispatch();\n\n  const { token, user } = useSelector(state => state.userState);\n\n  const history = useHistory();\n\n\n  useEffect(() => {\n   // dispatch(loadUserInfo());\n  }, [])\n\n  const isAdmin = token !== null && user?.role?.name !== \"Client\";\n\n  const logOut = () => {\n    dispatch(logoutAction());\n    history.push(\"/\");\n  }\n\n  const menu = (\n    <Menu style={{ backgroundColor: \"#14213d\" }}>\n      <Menu.Item >\n        <a target=\"_blank\" className=\"menuLink\" style={{ color: \"#fdde6c\" }} >\n          <i className=\"fas fa-user\" style={{ marginRight: \"1rem\" }} />\n              Profile\n            </a>\n      </Menu.Item>\n      <Menu.Item >\n        <a onClick={logOut} className=\"menuLink\" target=\"_blank\" style={{ color: \"#fdde6c\" }} >\n          <i className=\"fas fa-sign-out-alt\" style={{ marginRight: \"1rem\" }} />\n              Log out\n            </a>\n      </Menu.Item>\n    </Menu>\n  );\n\n  return (\n    <div className=\"navbar\">\n      <div className=\"brand\">\n        {isAdmin && <div className=\"hamburger\" onClick={setToggle}>\n          <div />\n          <div />\n          <div />\n        </div>}\n\n        <div className=\"logo\">\n          <a style={{ color: \"#fdde6c\", textTransform: \"lowercase\", paddingLeft: \"2rem\", fontSize: \"25px\" }} href=\"#!\">eventor</a>\n        </div>\n      </div>\n\n      <Dropdown overlay={menu}>\n        <div className=\"left\">\n          <i style={{ color: \"#fdde6c\" }} className=\"fas fa-chevron-down\" />\n        </div>\n      </Dropdown>\n    </div>\n  );\n};\n\n\nexport default Navbar;\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Content.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/rootReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/userReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/api.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/login.js",["147","148","149","150"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/auth/Login.js",["151","152"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/dashboard.js",["153"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/Dashboard.js",["154","155"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/EventsDashboard.js",["156","157"],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Layout/Exemple.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/EventForm.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/logoutAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loadUserInfo.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/Users/loginAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventTypeReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/getTypesAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/EventTypes.js",["158","159","160","161","162"],"import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Button, Header, Icon, Table, Menu, Divider, IconGroup } from 'semantic-ui-react'\nimport { getAllEventTypes } from '../../redux/actions/eventTypes/getTypesAction';\nimport { Tag, Modal, Form, Input, Space } from 'antd';\nimport * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { createEventTypeAction } from '../../redux/actions/eventTypes/eventTypeCUD';\nimport { successToast } from '../../common/Notifications';\nimport axios from 'axios';\nimport { eventTypesUrls } from '../../redux/api';\nimport { editToast } from \"../../common/Notifications\";\n\nexport const EventTypes = () => {\n\n    const { eventTypes } = useSelector(state => state.eventTypesState);\n    const { user } = useSelector(state => state.userState);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(getAllEventTypes());\n    }, [eventTypes]);\n\n    const [editMode, setEditMode] = useState(false);\n\n    //Add event type modal\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    const openModalforAdd = () => {\n        setEditMode(false);\n        setIsModalVisible(true);\n        formik.values.name = \"\";\n        formik.values.id = 0;\n    };\n\n\n\n    const openModalforEdit = async (id) => {\n        const eventT = await axios.get(eventTypesUrls.details(id));\n        formik.values.name = eventT.data.name;\n        formik.values.id = eventT.data.id;\n        setEditMode(true);\n        setIsModalVisible(true);\n    };\n\n    //Edit Submit Handler\n    const editHandler = async () => {\n        await axios.put(eventTypesUrls.edit(formik.values.id), formik.values);\n        setIsModalVisible(false);\n        editToast(\"Event Type updated ! ✅\");\n    }\n\n\n    const closeModal = () => {\n        setIsModalVisible(false);\n    };\n\n    //Delete Modal\n    const [isDModalVisible, setIsDModalVisible] = useState(false);\n    const openDModal = () => {\n        setIsDModalVisible(true);\n    };\n\n    const closeDModal = () => {\n        setIsDModalVisible(false);\n    };\n\n    //Load event Type\n    const [getEvType, setGetEvType] = useState({})\n\n    const loadEType = async (id) => {\n        const eventT = await axios.get(eventTypesUrls.details(id));\n        setGetEvType({ ...getEvType, ...eventT.data });\n        console.log(getEvType);\n        openDModal();\n    }\n\n    const deleteETypeHandle = async (id) => {\n        await axios.delete(eventTypesUrls.delete(id));\n    }\n\n\n\n    //Form handling \n\n    //Initial Values\n    const myInitialValues = { name: '' };\n\n    //Validation\n    const myValidationSchema = new Yup.object({\n        name: Yup.string().required(),\n    })\n\n    //Form handler\n    const formik = useFormik({\n        validationSchema: myValidationSchema,\n        initialValues: myInitialValues\n    })\n\n    //Create Submit eType handler\n    const submitHandler = (eType) => {\n        eType.id = eventTypes[eventTypes.length - 1].id + 1;\n        dispatch(createEventTypeAction(eType));\n        eventTypes.push(eType);\n        setIsModalVisible(false);\n        successToast(\"Event Type has been Added ! 👌\");\n    }\n\n\n    return (\n        <>\n            <div className=\"header\">\n                <Header as='h2'>\n                    <Icon name='fas fa-list' />\n                    <Header.Content>\n                        Event Types List\n                        <Header.Subheader>Manage event categories</Header.Subheader>\n                    </Header.Content>\n                </Header>\n                <Button onClick={openModalforAdd} color=\"green\"><Icon name=\"calendar\" /> Create new Event Type</Button>\n            </div>\n            <Divider />\n            <Table celled>\n                <Table.Header>\n                    <Table.Row>\n                        <Table.HeaderCell>Category Id</Table.HeaderCell>\n                        <Table.HeaderCell>Category Name</Table.HeaderCell>\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\n                    </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                    {eventTypes.map(item => {\n                        return <Table.Row key={item.id}>\n                            <Table.Cell>{item.id}</Table.Cell>\n                            <Table.Cell>{item.name}</Table.Cell>\n                            <Table.Cell>\n                                <Icon onClick={() => openModalforEdit(item.id)} name=\"edit\" title=\"Edit\" color=\"blue\" size=\"large\" />\n                                &nbsp;&nbsp;\n                                <Icon onClick={() => loadEType(item.id)} style={{ cursor: 'pointer' }} size=\"large\" title=\"Delete\" name=\"trash\" color=\"red\" /></Table.Cell>\n                        </Table.Row>\n                    })}\n                </Table.Body>\n            </Table>\n\n\n            {/* Add Event type modal  */}\n            <Modal title={editMode ? \"Update Event\" : \"Add an Event Type\"}\n                visible={isModalVisible}\n                onCancel={closeModal}\n                footer={[\n                    <Button onClick={closeModal}>\n                        Cancel\n                </Button>,\n                    <Button\n                        disabled={Object.keys(formik.errors).length !== 0}\n                        onClick={() => editMode ? editHandler() : submitHandler(formik.values)}\n                        color={editMode ? \"blue\" : \"green\"}>\n                        {editMode ? \"Update\" : \"Create\"}\n                    </Button>,\n                ]}>\n                <Form layout=\"vertical\">\n                    <Form.Item\n                        label=\"Type Name\">\n                        <Input name='name' {...formik.getFieldProps('name')} />\n                        {formik.touched.name && formik.errors.name && <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.name}</pre>}\n                    </Form.Item>\n                </Form>\n            </Modal>\n\n\n            {/* Delete evType Modal */}\n            <Modal title='Delete Event Type'\n                visible={isDModalVisible}\n                onCancel={closeDModal}\n                footer={[\n                    <Button onClick={closeDModal}>\n                        Cancel\n                </Button>,\n                    <Button\n                        onClick={() => deleteETypeHandle(getEvType.id)}\n                        color=\"red\">\n                        Delete\n                </Button>,\n                ]}>\n                <h3>Are you sure you want to delete Event Type: <Tag style={{ fontSize: \"20px\" }} color=\"red\">{getEvType.name}</Tag></h3>\n            </Modal>\n\n        </>\n    )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventTypes/eventTypeCUD.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/animations.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/CountryCityDATA.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/EventEditForm.js",["163"],"import { useFormik } from 'formik';\nimport React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux';\nimport { myValidationSchema } from './EventForm';\nimport {\n    Form,\n    Input,\n    Select,\n    DatePicker,\n    InputNumber,\n    Upload,\n    Button as AntdButton\n} from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { Button } from 'semantic-ui-react';\nimport { eventsUrls, uploadImageUrl } from '../../redux/api';\nimport axios from 'axios';\nimport { editToast } from '../../common/Notifications';\n\nexport const EventEditForm = ({ closeEDrawer }) => {\n\n\n    //retrieve event types array from evTypes reducer\n    const { eventTypes } = useSelector(state => state.eventTypesState);\n    const { event } = useSelector(state => state.eventState);\n\n    useEffect(() => {\n     \n        console.log(event);\n    }, [])\n\n\n    //Set up Event Object to object\n    const initialValues = {\n        eventName: event.eventName,\n        description: event.description,\n        country: event.country,\n        city: event.city,\n        availabletickets: event.availableTickets,\n        ticketprice: event.ticketPrice,\n        eventtypeid: event.eventType.id,\n        eventDate: null,\n        image: event.imagePath,\n    }\n\n    //Set up formik object to handle the form\n    const formik = useFormik({\n        validationSchema: myValidationSchema,\n        initialValues: initialValues,\n    })\n\n    //Image upload logic\n    const eventImageUpload = async (file) => {\n        let formData = new FormData();\n        formData.append('file', file);\n        let response = await axios.post(uploadImageUrl, formData);\n        //Assign response to image path\n        formik.values.image = response.data;\n    }\n\n\n    //Country / City Dropdown logic\n    const [CountryCity, setCountryCity] = useState([]);\n    const [Cities, setCities] = useState([]);\n\n    //fetch event types for form event type dropdown from the api on component load\n    useEffect(() => {\n        const fetchCountryAPI = async () => {\n            let response = await axios.get(\"https://countriesnow.space/api/v0.1/countries\");\n            setCountryCity(response.data.data);\n        }\n        fetchCountryAPI();\n    }, [])\n\n    const submitHandler = async (ev) => {\n        console.log(ev);\n        await axios.patch(eventsUrls.edit(event.id), ev)\n        closeEDrawer();\n        editToast(\"The event Has been Updated! ✅\");\n    }\n\n\n    return (\n        <Form\n            className=\"eventForm\"\n            wrapperCol={{ span: 26 }}\n            layout=\"vertical\"\n            onFinish={() => submitHandler(formik.values)}\n        >\n            <Form.Item label=\"Event Name\">\n                <Input name='eventName' {...formik.getFieldProps('eventName')} />\n                {formik.touched.eventName && formik.errors.eventName &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventName}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Type\">\n                <Select\n                    name='eventtypeid'\n                    onChange={evtype => formik.setFieldValue('eventtypeid', evtype)}\n                    value={formik.values.eventtypeid}>\n                    {eventTypes.map(eType => {\n                        return <Select.Option value={eType.id}>{eType.name}</Select.Option>\n                    })}\n                </Select>\n                {formik.touched.eventtypeid && formik.errors.eventtypeid &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventtypeid}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Country\">\n                <Select\n                    name='country'\n                    onChange={country => formik.setFieldValue('country', country)}\n                    onSelect={country => ((setCities(CountryCity.filter(x => x.country === country)[0].cities), formik.setFieldValue('country', country)))}\n                    value={formik.values.country}>\n                    {CountryCity.map(c => {\n                        return <Select.Option value={c.country}>{c.country}</Select.Option>\n                    })}\n                </Select>\n                {formik.touched.country && formik.values.country === \"\" && console.log(formik.errors.country)}\n            </Form.Item>\n            <Form.Item label=\"City\">\n                <Select\n                    name='city'\n                    onChange={city => (formik.setFieldValue('city', city))}\n                    value={formik.values.city}>\n                    {Cities.map((c, index) => {\n                        return <Select.Option key={index} value={c}>{c}</Select.Option>\n                    })}\n\n                </Select>\n                {formik.touched.city && formik.errors.city &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.city}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Description\">\n                <Input.TextArea name='description' {...formik.getFieldProps('description')} />\n                {formik.touched.description && formik.errors.description &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.description}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Date\">\n\n                <DatePicker\n                    name='eventDate'\n                    onChange={date => (formik.setFieldValue('eventDate', date))}\n                    value={formik.values.eventDate}\n                    className=\"input\"\n                    showTime\n                    format=\"YYYY-MM-DD HH:mm:ss\" />\n                {formik.touched.eventDate && formik.errors.eventDate &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.eventDate}</pre>}\n\n            </Form.Item>\n            <Form.Item label=\"Ticket Price\">\n                <InputNumber\n                    name='ticketprice'\n                    onChange={price => formik.setFieldValue('ticketprice', price)}\n                    value={formik.values.ticketprice}\n                    style={{ width: \"25.2rem\" }} />\n                {formik.touched.ticketprice && formik.errors.ticketprice &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.ticketprice}</pre>}\n            </Form.Item>\n            <Form.Item label=\"No of available tickets\">\n                <Input\n                    name='availabletickets'\n                    /* onChange={tickets => formik.setFieldValue('availabletickets', tickets)} */\n                    {...formik.getFieldProps('availabletickets')}\n                    value={formik.values.availabletickets}\n                    style={{ width: \"25.2rem\" }} />\n                {formik.touched.availabletickets && formik.errors.availabletickets &&\n                    <pre style={{ color: \"red\", marginTop: \"0.1rem\" }}>{formik.errors.availabletickets}</pre>}\n            </Form.Item>\n            <Form.Item label=\"Event Image\">\n                <Upload name='image' action={eventImageUpload}>\n                    <AntdButton icon={<UploadOutlined />}>Click to Upload</AntdButton>\n                </Upload>\n            </Form.Item>\n            <Form.Item >\n                <Button color=\"blue\" disabled={Object.keys(formik.errors).length > 1} htmlType=\"submit\">Update</Button>\n                <Button color=\"grey\" type=\"button\" onClick={closeEDrawer}>Cancel</Button>\n            </Form.Item>\n        </Form>\n    )\n}\n","/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/eventAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/common/Notifications.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/actions/eventActions/loadEventAction.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/redux/reducers/eventReducer.js",[],"/Users/anascheriet/Documents/Projects/React/events_web_app/src/Components/events/HHHHH.js",[],["164","165"],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":26},{"ruleId":"170","severity":1,"message":"174","line":21,"column":9,"nodeType":"172","messageId":"173","endLine":21,"endColumn":17},{"ruleId":"170","severity":1,"message":"175","line":5,"column":10,"nodeType":"172","messageId":"173","endLine":5,"endColumn":22},{"ruleId":"176","severity":1,"message":"177","line":30,"column":9,"nodeType":"178","endLine":30,"endColumn":79},{"ruleId":"176","severity":1,"message":"177","line":36,"column":9,"nodeType":"178","endLine":36,"endColumn":96},{"ruleId":"170","severity":1,"message":"179","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":14},{"ruleId":"170","severity":1,"message":"180","line":2,"column":16,"nodeType":"172","messageId":"173","endLine":2,"endColumn":21},{"ruleId":"170","severity":1,"message":"181","line":2,"column":23,"nodeType":"172","messageId":"173","endLine":2,"endColumn":29},{"ruleId":"170","severity":1,"message":"182","line":2,"column":31,"nodeType":"172","messageId":"173","endLine":2,"endColumn":39},{"ruleId":"176","severity":1,"message":"177","line":77,"column":11,"nodeType":"178","endLine":77,"endColumn":15},{"ruleId":"176","severity":1,"message":"177","line":78,"column":11,"nodeType":"178","endLine":78,"endColumn":15},{"ruleId":"183","severity":2,"message":"184","line":6,"column":31,"nodeType":"172","endLine":6,"endColumn":42},{"ruleId":"170","severity":1,"message":"171","line":1,"column":17,"nodeType":"172","messageId":"173","endLine":1,"endColumn":26},{"ruleId":"170","severity":1,"message":"185","line":2,"column":10,"nodeType":"172","messageId":"173","endLine":2,"endColumn":21},{"ruleId":"186","severity":1,"message":"187","line":22,"column":8,"nodeType":"188","endLine":22,"endColumn":10,"suggestions":"189"},{"ruleId":"190","severity":1,"message":"191","line":141,"column":28,"nodeType":"178","endLine":141,"endColumn":101},{"ruleId":"170","severity":1,"message":"192","line":3,"column":39,"nodeType":"172","messageId":"173","endLine":3,"endColumn":43},{"ruleId":"170","severity":1,"message":"193","line":3,"column":54,"nodeType":"172","messageId":"173","endLine":3,"endColumn":63},{"ruleId":"170","severity":1,"message":"194","line":5,"column":35,"nodeType":"172","messageId":"173","endLine":5,"endColumn":40},{"ruleId":"170","severity":1,"message":"195","line":17,"column":13,"nodeType":"172","messageId":"173","endLine":17,"endColumn":17},{"ruleId":"186","severity":1,"message":"187","line":23,"column":8,"nodeType":"188","endLine":23,"endColumn":20,"suggestions":"196"},{"ruleId":"186","severity":1,"message":"197","line":30,"column":8,"nodeType":"188","endLine":30,"endColumn":10,"suggestions":"198"},{"ruleId":"166","replacedBy":"199"},{"ruleId":"168","replacedBy":"200"},"no-native-reassign",["201"],"no-negated-in-lhs",["202"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","'loadUserInfo' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Form' is defined but never used.","'Input' is defined but never used.","'Button' is defined but never used.","'Checkbox' is defined but never used.","react-hooks/rules-of-hooks","React Hook \"useSelector\" is called in function \"dashboard\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter.","'useSelector' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["203"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Menu' is defined but never used.","'IconGroup' is defined but never used.","'Space' is defined but never used.","'user' is assigned a value but never used.",["204"],"React Hook useEffect has a missing dependency: 'event'. Either include it or remove the dependency array.",["205"],["201"],["202"],"no-global-assign","no-unsafe-negation",{"desc":"206","fix":"207"},{"desc":"208","fix":"209"},{"desc":"210","fix":"211"},"Update the dependencies array to be: [dispatch]",{"range":"212","text":"213"},"Update the dependencies array to be: [dispatch, eventTypes]",{"range":"214","text":"215"},"Update the dependencies array to be: [event]",{"range":"216","text":"217"},[896,898],"[dispatch]",[947,959],"[dispatch, eventTypes]",[856,858],"[event]"]